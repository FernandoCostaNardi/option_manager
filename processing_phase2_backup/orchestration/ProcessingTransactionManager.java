package com.olisystem.optionsmanager.service.invoice.processing.orchestration;

import com.olisystem.optionsmanager.model.invoice.Invoice;
import com.olisystem.optionsmanager.model.operation.Operation;
import com.olisystem.optionsmanager.model.operation.OperationSourceMapping;
import com.olisystem.optionsmanager.model.invoice.InvoiceProcessingLog;
import com.olisystem.optionsmanager.repository.OperationRepository;
import com.olisystem.optionsmanager.repository.OperationSourceMappingRepository;
import com.olisystem.optionsmanager.repository.InvoiceProcessingLogRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Gerenciador de transa√ß√µes para processamento de invoices
 * Controla rollback total e isolamento de transa√ß√µes
 * 
 * @author Sistema de Gest√£o de Op√ß√µes
 * @since 2025-07-03
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ProcessingTransactionManager {

    private final OperationRepository operationRepository;
    private final OperationSourceMappingRepository mappingRepository;
    private final InvoiceProcessingLogRepository processingLogRepository;

    // Controle de transa√ß√µes ativas
    private final Map<String, ProcessTransaction> activeTransactions = new ConcurrentHashMap<>();
    private final Map<String, List<String>> processInvoiceTransactions = new ConcurrentHashMap<>();

    /**
     * Inicia transa√ß√£o principal do processo
     * 
     * @param processId ID do processo
     * @param invoices Lista de invoices a serem processadas
     * @return ID da transa√ß√£o principal
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public String beginProcessTransaction(String processId, List<Invoice> invoices) {
        log.debug("üîÑ Iniciando transa√ß√£o principal do processo {}", processId);
        
        ProcessTransaction transaction = ProcessTransaction.builder()
                .transactionId(processId)
                .processId(processId)
                .transactionType(TransactionType.PROCESS)
                .startTime(LocalDateTime.now())
                .invoices(new ArrayList<>(invoices))
                .createdOperations(new ArrayList<>())
                .createdMappings(new ArrayList<>())
                .createdLogs(new ArrayList<>())
                .status(TransactionStatus.ACTIVE)
                .build();
        
        activeTransactions.put(processId, transaction);
        processInvoiceTransactions.put(processId, new ArrayList<>());
        
        log.info("‚úÖ Transa√ß√£o principal {} iniciada para {} invoices", processId, invoices.size());
        return processId;
    }

    /**
     * Inicia transa√ß√£o para uma invoice espec√≠fica
     * 
     * @param processId ID do processo pai
     * @param invoice Invoice a ser processada
     * @return ID da transa√ß√£o da invoice
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public String beginInvoiceTransaction(String processId, Invoice invoice) {
        String invoiceTransactionId = processId + "_" + invoice.getInvoiceNumber();
        
        log.debug("üîÑ Iniciando transa√ß√£o da invoice {} no processo {}", 
                 invoice.getInvoiceNumber(), processId);
        
        ProcessTransaction invoiceTransaction = ProcessTransaction.builder()
                .transactionId(invoiceTransactionId)
                .processId(processId)
                .transactionType(TransactionType.INVOICE)
                .startTime(LocalDateTime.now())
                .invoices(Arrays.asList(invoice))
                .createdOperations(new ArrayList<>())
                .createdMappings(new ArrayList<>())
                .createdLogs(new ArrayList<>())
                .status(TransactionStatus.ACTIVE)
                .build();
        
        activeTransactions.put(invoiceTransactionId, invoiceTransaction);
        
        // Associar √† transa√ß√£o principal
        processInvoiceTransactions.get(processId).add(invoiceTransactionId);
        
        log.debug("‚úÖ Transa√ß√£o da invoice {} iniciada", invoice.getInvoiceNumber());
        return invoiceTransactionId;
    }

    /**
     * Registra opera√ß√£o criada para rollback
     * 
     * @param transactionId ID da transa√ß√£o
     * @param operation Opera√ß√£o criada
     */
    public void registerCreatedOperation(String transactionId, Operation operation) {
        ProcessTransaction transaction = activeTransactions.get(transactionId);
        if (transaction != null) {
            transaction.getCreatedOperations().add(operation);
            log.debug("üìù Opera√ß√£o {} registrada na transa√ß√£o {}", 
                     operation.getId().toString().substring(0, 8), transactionId);
        }
    }

    /**
     * Registra mapeamento criado para rollback
     * 
     * @param transactionId ID da transa√ß√£o
     * @param mapping Mapeamento criado
     */
    public void registerCreatedMapping(String transactionId, OperationSourceMapping mapping) {
        ProcessTransaction transaction = activeTransactions.get(transactionId);
        if (transaction != null) {
            transaction.getCreatedMappings().add(mapping);
            log.debug("üìù Mapeamento {} registrado na transa√ß√£o {}", 
                     mapping.getId().toString().substring(0, 8), transactionId);
        }
    }

    /**
     * Registra log criado para rollback
     * 
     * @param transactionId ID da transa√ß√£o
     * @param log Log criado
     */
    public void registerCreatedLog(String transactionId, InvoiceProcessingLog log) {
        ProcessTransaction transaction = activeTransactions.get(transactionId);
        if (transaction != null) {
            transaction.getCreatedLogs().add(log);
            log.debug("üìù Log {} registrado na transa√ß√£o {}", 
                     log.getId().toString().substring(0, 8), transactionId);
        }
    }

    /**
     * Confirma transa√ß√£o de uma invoice
     * 
     * @param invoiceTransactionId ID da transa√ß√£o da invoice
     */
    @Transactional
    public void commitInvoiceTransaction(String invoiceTransactionId) {
        ProcessTransaction transaction = activeTransactions.get(invoiceTransactionId);
        
        if (transaction != null) {
            transaction.setStatus(TransactionStatus.COMMITTED);
            transaction.setEndTime(LocalDateTime.now());
            
            log.info("‚úÖ Transa√ß√£o da invoice {} confirmada - {} opera√ß√µes, {} mapeamentos",
                     invoiceTransactionId, 
                     transaction.getCreatedOperations().size(),
                     transaction.getCreatedMappings().size());
        }
    }

    /**
     * Executa rollback de uma transa√ß√£o de invoice
     * 
     * @param invoiceTransactionId ID da transa√ß√£o da invoice
     */
    @Transactional
    public void rollbackInvoiceTransaction(String invoiceTransactionId) {
        ProcessTransaction transaction = activeTransactions.get(invoiceTransactionId);
        
        if (transaction != null) {
            log.warn("üîÑ Executando rollback da transa√ß√£o da invoice {}", invoiceTransactionId);
            
            executeRollbackOperations(transaction);
            
            transaction.setStatus(TransactionStatus.ROLLED_BACK);
            transaction.setEndTime(LocalDateTime.now());
            
            log.info("‚úÖ Rollback da transa√ß√£o {} conclu√≠do", invoiceTransactionId);
        }
    }

    /**
     * Confirma transa√ß√£o principal do processo
     * 
     * @param processId ID do processo
     */
    @Transactional
    public void commitProcessTransaction(String processId) {
        ProcessTransaction transaction = activeTransactions.get(processId);
        
        if (transaction != null) {
            // Verificar se todas as transa√ß√µes de invoice foram confirmadas
            List<String> invoiceTransactionIds = processInvoiceTransactions.get(processId);
            boolean allCommitted = invoiceTransactionIds.stream()
                    .allMatch(id -> {
                        ProcessTransaction invoiceTransaction = activeTransactions.get(id);
                        return invoiceTransaction != null && 
                               invoiceTransaction.getStatus() == TransactionStatus.COMMITTED;
                    });
            
            if (allCommitted) {
                transaction.setStatus(TransactionStatus.COMMITTED);
                transaction.setEndTime(LocalDateTime.now());
                
                // Consolidar opera√ß√µes de todas as transa√ß√µes de invoice
                consolidateTransactionData(processId);
                
                log.info("‚úÖ Transa√ß√£o principal {} confirmada - processo conclu√≠do com sucesso", processId);
            } else {
                log.warn("‚ö†Ô∏è Nem todas as transa√ß√µes de invoice foram confirmadas - processo n√£o pode ser finalizado");
            }
        }
    }

    /**
     * Executa rollback completo do processo
     * 
     * @param processId ID do processo
     * @param cause Causa do rollback
     */
    @Transactional
    public void executeRollback(String processId, Exception cause) {
        log.error("üö® Executando rollback COMPLETO do processo {} - Causa: {}", 
                 processId, cause.getMessage());
        
        ProcessTransaction mainTransaction = activeTransactions.get(processId);
        
        if (mainTransaction != null) {
            // Executar rollback de todas as transa√ß√µes de invoice primeiro
            List<String> invoiceTransactionIds = processInvoiceTransactions.get(processId);
            
            for (String invoiceTransactionId : invoiceTransactionIds) {
                ProcessTransaction invoiceTransaction = activeTransactions.get(invoiceTransactionId);
                
                if (invoiceTransaction != null && 
                    invoiceTransaction.getStatus() != TransactionStatus.ROLLED_BACK) {
                    
                    log.debug("üîÑ Executando rollback da transa√ß√£o de invoice {}", invoiceTransactionId);
                    executeRollbackOperations(invoiceTransaction);
                    invoiceTransaction.setStatus(TransactionStatus.ROLLED_BACK);
                }
            }
            
            // Executar rollback da transa√ß√£o principal
            executeRollbackOperations(mainTransaction);
            
            mainTransaction.setStatus(TransactionStatus.ROLLED_BACK);
            mainTransaction.setEndTime(LocalDateTime.now());
            mainTransaction.setRollbackCause(cause.getMessage());
            
            log.error("‚úÖ Rollback COMPLETO do processo {} conclu√≠do", processId);
        }
        
        // Limpar transa√ß√µes ativas
        cleanupTransactions(processId);
    }

    /**
     * Executa opera√ß√µes de rollback para uma transa√ß√£o
     * 
     * @param transaction Transa√ß√£o a ter rollback
     */
    private void executeRollbackOperations(ProcessTransaction transaction) {
        log.debug("üîÑ Executando opera√ß√µes de rollback para transa√ß√£o {}", transaction.getTransactionId());
        
        // Rollback em ordem reversa de cria√ß√£o
        
        // 1. Remover logs de processamento
        for (InvoiceProcessingLog log : transaction.getCreatedLogs()) {
            try {
                processingLogRepository.delete(log);
                log.debug("üóëÔ∏è Log {} removido", log.getId());
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Erro ao remover log {}: {}", log.getId(), e.getMessage());
            }
        }
        
        // 2. Remover mapeamentos de origem
        for (OperationSourceMapping mapping : transaction.getCreatedMappings()) {
            try {
                mappingRepository.delete(mapping);
                log.debug("üóëÔ∏è Mapeamento {} removido", mapping.getId());
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Erro ao remover mapeamento {}: {}", mapping.getId(), e.getMessage());
            }
        }
        
        // 3. Remover opera√ß√µes criadas
        // ATEN√á√ÉO: Isso pode ser complexo devido √†s depend√™ncias (Position, AverageOperationGroup, etc.)
        for (Operation operation : transaction.getCreatedOperations()) {
            try {
                // TODO: Implementar remo√ß√£o cascata de Position, AverageOperationGroup, etc.
                // Por enquanto, apenas marcar como inativa
                operation.setStatus(com.olisystem.optionsmanager.model.operation.OperationStatus.HIDDEN);
                operationRepository.save(operation);
                
                log.debug("üóëÔ∏è Opera√ß√£o {} marcada como HIDDEN", operation.getId());
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Erro ao remover opera√ß√£o {}: {}", operation.getId(), e.getMessage());
            }
        }
        
        log.debug("‚úÖ Rollback executado: {} opera√ß√µes, {} mapeamentos, {} logs processados",
                 transaction.getCreatedOperations().size(),
                 transaction.getCreatedMappings().size(),
                 transaction.getCreatedLogs().size());
    }

    /**
     * Consolida dados de todas as transa√ß√µes do processo
     * 
     * @param processId ID do processo
     */
    private void consolidateTransactionData(String processId) {
        ProcessTransaction mainTransaction = activeTransactions.get(processId);
        List<String> invoiceTransactionIds = processInvoiceTransactions.get(processId);
        
        // Consolidar opera√ß√µes, mapeamentos e logs de todas as transa√ß√µes
        for (String invoiceTransactionId : invoiceTransactionIds) {
            ProcessTransaction invoiceTransaction = activeTransactions.get(invoiceTransactionId);
            
            if (invoiceTransaction != null) {
                mainTransaction.getCreatedOperations().addAll(invoiceTransaction.getCreatedOperations());
                mainTransaction.getCreatedMappings().addAll(invoiceTransaction.getCreatedMappings());
                mainTransaction.getCreatedLogs().addAll(invoiceTransaction.getCreatedLogs());
            }
        }
        
        log.debug("üìä Dados consolidados: {} opera√ß√µes, {} mapeamentos, {} logs",
                 mainTransaction.getCreatedOperations().size(),
                 mainTransaction.getCreatedMappings().size(),
                 mainTransaction.getCreatedLogs().size());
    }

    /**
     * Limpa transa√ß√µes ativas ap√≥s conclus√£o/rollback
     * 
     * @param processId ID do processo
     */
    private void cleanupTransactions(String processId) {
        List<String> invoiceTransactionIds = processInvoiceTransactions.remove(processId);
        
        if (invoiceTransactionIds != null) {
            for (String invoiceTransactionId : invoiceTransactionIds) {
                activeTransactions.remove(invoiceTransactionId);
            }
        }
        
        activeTransactions.remove(processId);
        
        log.debug("üßπ Transa√ß√µes limpas para processo {}", processId);
    }

    /**
     * Retorna estat√≠sticas de uma transa√ß√£o
     * 
     * @param transactionId ID da transa√ß√£o
     * @return Estat√≠sticas da transa√ß√£o
     */
    public TransactionStats getTransactionStats(String transactionId) {
        ProcessTransaction transaction = activeTransactions.get(transactionId);
        
        if (transaction == null) {
            return null;
        }
        
        return TransactionStats.builder()
                .transactionId(transactionId)
                .status(transaction.getStatus())
                .startTime(transaction.getStartTime())
                .endTime(transaction.getEndTime())
                .operationsCreated(transaction.getCreatedOperations().size())
                .mappingsCreated(transaction.getCreatedMappings().size())
                .logsCreated(transaction.getCreatedLogs().size())
                .invoicesProcessed(transaction.getInvoices().size())
                .build();
    }

    /**
     * Status de transa√ß√£o
     */
    public enum TransactionStatus {
        ACTIVE, COMMITTED, ROLLED_BACK
    }

    /**
     * Tipo de transa√ß√£o
     */
    public enum TransactionType {
        PROCESS, INVOICE
    }

    /**
     * Transa√ß√£o de processamento
     */
    @lombok.Builder
    @lombok.Data
    private static class ProcessTransaction {
        private String transactionId;
        private String processId;
        private TransactionType transactionType;
        private TransactionStatus status;
        private LocalDateTime startTime;
        private LocalDateTime endTime;
        private List<Invoice> invoices;
        private List<Operation> createdOperations;
        private List<OperationSourceMapping> createdMappings;
        private List<InvoiceProcessingLog> createdLogs;
        private String rollbackCause;
    }

    /**
     * Estat√≠sticas de transa√ß√£o
     */
    @lombok.Builder
    @lombok.Data
    public static class TransactionStats {
        private String transactionId;
        private TransactionStatus status;
        private LocalDateTime startTime;
        private LocalDateTime endTime;
        private int operationsCreated;
        private int mappingsCreated;
        private int logsCreated;
        private int invoicesProcessed;
        
        public long getDurationMs() {
            if (startTime != null && endTime != null) {
                return java.time.Duration.between(startTime, endTime).toMillis();
            }
            return 0;
        }
        
        public boolean isActive() {
            return status == TransactionStatus.ACTIVE;
        }
    }
}