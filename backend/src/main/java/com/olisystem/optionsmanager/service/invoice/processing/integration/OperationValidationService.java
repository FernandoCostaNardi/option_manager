package com.olisystem.optionsmanager.service.invoice.processing.integration;

import com.olisystem.optionsmanager.model.auth.User;
import com.olisystem.optionsmanager.service.invoice.processing.detection.ConsolidatedOperation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Servi√ßo de valida√ß√£o de opera√ß√µes
 * Valida opera√ß√µes antes da integra√ß√£o no sistema
 * 
 * @author Sistema de Gest√£o de Op√ß√µes
 * @since 2025-07-14
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class OperationValidationService {

    /**
     * Valida uma opera√ß√£o consolidada
     */
    public ValidationResult validateOperation(ConsolidatedOperation operation, User user) {
        log.debug("üîç Validando opera√ß√£o: {} {} {} @ {}", 
            operation.getTransactionType(), operation.getQuantity(), 
            operation.getAssetCode(), operation.getUnitPrice());
        
        List<String> errors = new ArrayList<>();
        List<String> warnings = new ArrayList<>();
        
        try {
            // 1. Valida√ß√µes b√°sicas
            validateBasicFields(operation, errors);
            
            // 2. Valida√ß√µes de neg√≥cio
            validateBusinessRules(operation, user, errors, warnings);
            
            // 3. Valida√ß√µes de dados
            validateDataIntegrity(operation, errors, warnings);
            
            // 4. Determinar resultado
            boolean isValid = errors.isEmpty();
            String errorMessage = errors.isEmpty() ? null : String.join("; ", errors);
            String warningMessage = warnings.isEmpty() ? null : String.join("; ", warnings);
            
            ValidationResult result = ValidationResult.builder()
                .valid(isValid)
                .errorMessage(errorMessage)
                .warningMessage(warningMessage)
                .errorCount(errors.size())
                .warningCount(warnings.size())
                .build();
            
            if (isValid) {
                log.debug("‚úÖ Opera√ß√£o v√°lida: {}", operation.getAssetCode());
            } else {
                log.warn("‚ùå Opera√ß√£o inv√°lida: {} - {}", operation.getAssetCode(), errorMessage);
            }
            
            return result;
            
        } catch (Exception e) {
            log.error("‚ùå Erro durante valida√ß√£o da opera√ß√£o {}: {}", 
                operation.getAssetCode(), e.getMessage());
            
            return ValidationResult.builder()
                .valid(false)
                .errorMessage("Erro durante valida√ß√£o: " + e.getMessage())
                .errorCount(1)
                .build();
        }
    }

    /**
     * Valida campos b√°sicos da opera√ß√£o
     */
    private void validateBasicFields(ConsolidatedOperation operation, List<String> errors) {
        // C√≥digo do ativo
        if (operation.getAssetCode() == null || operation.getAssetCode().trim().isEmpty()) {
            errors.add("C√≥digo do ativo √© obrigat√≥rio");
        }
        
        // Quantidade
        if (operation.getQuantity() == null || operation.getQuantity() <= 0) {
            errors.add("Quantidade deve ser maior que zero");
        }
        
        // Pre√ßo unit√°rio
        if (operation.getUnitPrice() == null || operation.getUnitPrice().compareTo(BigDecimal.ZERO) <= 0) {
            errors.add("Pre√ßo unit√°rio deve ser maior que zero");
        }
        
        // Tipo de transa√ß√£o
        if (operation.getTransactionType() == null) {
            errors.add("Tipo de transa√ß√£o √© obrigat√≥rio");
        }
        
        // Data de negocia√ß√£o
        if (operation.getTradeDate() == null) {
            errors.add("Data de negocia√ß√£o √© obrigat√≥ria");
        }
    }

    /**
     * Valida regras de neg√≥cio
     */
    private void validateBusinessRules(ConsolidatedOperation operation, User user, 
                                    List<String> errors, List<String> warnings) {
        // Verificar se o usu√°rio pode criar opera√ß√µes
        if (user == null) {
            errors.add("Usu√°rio n√£o informado");
            return;
        }
        
        // Verificar confian√ßa da consolida√ß√£o
        if (!operation.hasHighConsolidationConfidence()) {
            warnings.add("Baixa confian√ßa na consolida√ß√£o (" + 
                String.format("%.1f%%", operation.getConsolidationConfidence() * 100) + ")");
        }
        
        // Verificar se est√° pronto para cria√ß√£o
        if (!operation.isReadyForCreation()) {
            errors.add("Opera√ß√£o n√£o est√° pronta para cria√ß√£o");
        }
        
        // Verificar quantidade m√°xima (exemplo: 10000 lotes)
        if (operation.getQuantity() != null && operation.getQuantity() > 10000) {
            warnings.add("Quantidade muito alta (" + operation.getQuantity() + " lotes)");
        }
        
        // Verificar valor total m√°ximo (exemplo: R$ 1.000.000)
        if (operation.getTotalValue() != null && 
            operation.getTotalValue().compareTo(BigDecimal.valueOf(1000000)) > 0) {
            warnings.add("Valor total muito alto (R$ " + operation.getTotalValue() + ")");
        }
    }

    /**
     * Valida integridade dos dados
     */
    private void validateDataIntegrity(ConsolidatedOperation operation, List<String> errors, List<String> warnings) {
        // Verificar se o valor total est√° correto
        if (operation.getQuantity() != null && operation.getUnitPrice() != null && 
            operation.getTotalValue() != null) {
            
            BigDecimal expectedTotal = operation.getUnitPrice()
                .multiply(BigDecimal.valueOf(operation.getQuantity()));
            
            if (operation.getTotalValue().compareTo(expectedTotal) != 0) {
                errors.add("Valor total n√£o confere com quantidade √ó pre√ßo unit√°rio");
            }
        }
        
        // Verificar se h√° opera√ß√µes fonte
        if (operation.getSourceOperations() == null || operation.getSourceOperations().isEmpty()) {
            errors.add("Opera√ß√£o n√£o possui opera√ß√µes fonte");
        }
        
        // Verificar se o c√≥digo da op√ß√£o √© v√°lido
        if (operation.getOptionCode() != null && operation.getOptionCode().length() < 6) {
            warnings.add("C√≥digo da op√ß√£o pode estar incompleto");
        }
    }

    /**
     * Valida se uma opera√ß√£o pode ser integrada
     */
    public boolean canIntegrateOperation(ConsolidatedOperation operation, User user) {
        ValidationResult validation = validateOperation(operation, user);
        return validation.isValid();
    }

    /**
     * Valida uma lista de opera√ß√µes e retorna estat√≠sticas
     */
    public ValidationSummary validateOperations(List<ConsolidatedOperation> operations, User user) {
        log.info("üîç Validando {} opera√ß√µes", operations.size());
        
        ValidationSummary summary = ValidationSummary.builder()
            .totalOperations(operations.size())
            .validOperations(new ArrayList<>())
            .invalidOperations(new ArrayList<>())
            .build();
        
        for (ConsolidatedOperation operation : operations) {
            ValidationResult result = validateOperation(operation, user);
            
            if (result.isValid()) {
                summary.getValidOperations().add(operation);
            } else {
                summary.getInvalidOperations().add(operation);
            }
        }
        
        summary.setSuccessRate((double) summary.getValidOperations().size() / operations.size() * 100);
        
        log.info("‚úÖ Valida√ß√£o conclu√≠da: {} v√°lidas, {} inv√°lidas ({:.1f}% sucesso)", 
            summary.getValidOperations().size(), 
            summary.getInvalidOperations().size(),
            summary.getSuccessRate());
        
        return summary;
    }
} 