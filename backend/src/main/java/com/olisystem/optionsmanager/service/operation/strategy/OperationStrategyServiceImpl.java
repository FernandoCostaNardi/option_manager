package com.olisystem.optionsmanager.service.operation.strategy;

import com.olisystem.optionsmanager.exception.ResourceNotFoundException;
import com.olisystem.optionsmanager.model.operation.AverageOperationGroup;
import com.olisystem.optionsmanager.model.operation.AverageOperationItem;
import com.olisystem.optionsmanager.model.operation.Operation;
import com.olisystem.optionsmanager.model.operation.OperationRoleType;
import com.olisystem.optionsmanager.model.operation.OperationStatus;
import com.olisystem.optionsmanager.model.position.Position;
import com.olisystem.optionsmanager.model.transaction.TransactionType;
import com.olisystem.optionsmanager.record.operation.ExistingOperationContext;
import com.olisystem.optionsmanager.record.operation.OperationContext;
import com.olisystem.optionsmanager.repository.AverageOperationItemRepository;
import com.olisystem.optionsmanager.repository.OperationRepository;
import com.olisystem.optionsmanager.repository.position.PositionRepository;
import com.olisystem.optionsmanager.service.operation.averageOperation.AverageOperationService;
import com.olisystem.optionsmanager.service.operation.consolidate.OperationConsolidateService;
import com.olisystem.optionsmanager.service.operation.creation.OperationCreationService;
import com.olisystem.optionsmanager.service.position.PositionService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

@Slf4j
@Service
public class OperationStrategyServiceImpl implements OperationStrategyService {
    private final OperationCreationService creationService;
    private final PositionService positionService;
    private final AverageOperationService averageOperationService;
    private final AverageOperationItemRepository itemRepository;
    private final PositionRepository positionRepository;
    private final OperationConsolidateService consolidateService;
    private final OperationRepository operationRepository;

    // Construtor com inje√ß√£o de depend√™ncias
    public OperationStrategyServiceImpl(
            OperationCreationService creationService,
            PositionService positionService,
            AverageOperationService averageOperationService,
            AverageOperationItemRepository itemRepository,
            PositionRepository positionRepository,
            OperationConsolidateService consolidateService,
            OperationRepository operationRepository
           ) {
        this.creationService = creationService;
        this.positionService = positionService;
        this.averageOperationService = averageOperationService;
        this.itemRepository = itemRepository;
        this.positionRepository = positionRepository;
        this.consolidateService = consolidateService;
        this.operationRepository = operationRepository;
    }

    @Override
    @Transactional
    public Operation processNewOperation(OperationContext context) {
        // 1. Criar opera√ß√£o ativa
        Operation savedOperation = creationService.createActiveOperation(
                context.request(), context.optionSerie(), context.currentUser());

        // 2. ‚úÖ CORRE√á√ÉO: Buscar posi√ß√£o existente antes de criar nova
        Position position = findOrCreatePosition(savedOperation);
        log.info("Posi√ß√£o encontrada/criada: {} (direction: {})", position.getId(), position.getDirection());

        // 3. Criar grupo de opera√ß√µes
        averageOperationService.createGroupForNewPosition(savedOperation, position);

        return savedOperation;
    }

    /**
     * ‚úÖ CORRE√á√ÉO: Busca posi√ß√£o existente ou cria nova
     * Garante que s√≥ existe uma posi√ß√£o por (user, optionSerie, brokerage)
     * A dire√ß√£o da posi√ß√£o √© determinada pela primeira opera√ß√£o
     */
    private Position findOrCreatePosition(Operation operation) {
        // Buscar posi√ß√£o existente por usu√°rio, s√©rie de op√ß√µes e corretora (sem considerar dire√ß√£o)
        Optional<Position> existingPosition = positionRepository.findOpenPositionByUserAndOptionSeriesAndBrokerage(
                operation.getUser(), 
                operation.getOptionSeries(),
                operation.getBrokerage()
        );

        if (existingPosition.isPresent()) {
            log.info("‚úÖ Reutilizando posi√ß√£o existente: {} (direction: {}, brokerage: {})", 
                existingPosition.get().getId(), existingPosition.get().getDirection(), 
                existingPosition.get().getBrokerage().getName());
            
            // Adicionar opera√ß√£o √† posi√ß√£o existente
            return positionService.addEntryToPosition(existingPosition.get(), operation);
        } else {
            log.info("üÜï Criando nova posi√ß√£o para opera√ß√£o: {} (direction: {}, brokerage: {})", 
                operation.getId(), operation.getTransactionType(), operation.getBrokerage().getName());
            
            // Criar nova posi√ß√£o
            return positionService.createPositionFromOperation(operation);
        }
    }

    @Override
    @Transactional
    public Operation processExistingOperation(OperationContext context, Operation activeOperation) {
        // 1. Recuperar estruturas relacionadas √† opera√ß√£o existente
        AverageOperationGroup group = averageOperationService.getGroupByOperation(activeOperation);
        AverageOperationItem itemGroup = itemRepository.findByOperation(activeOperation);
        Position position = positionRepository.findById(group.getPositionId())
                .orElseThrow(() -> new ResourceNotFoundException("Posi√ß√£o n√£o encontrada"));

        // 2. Criar contexto completo
        ExistingOperationContext existingContext = new ExistingOperationContext(
                context.request(), context.optionSerie(), context.currentUser(),
                activeOperation, group, itemGroup, position);

        // 3. Determinar estrat√©gia baseada no tipo do item
        if (itemGroup != null && itemGroup.getRoleType() != OperationRoleType.CONSOLIDATED_ENTRY) {
            return processConsolidationStrategy(existingContext);
        } else {
            return processSimpleAdditionStrategy(existingContext);
        }
    }

    @Transactional
    public Operation processConsolidationStrategy(ExistingOperationContext context) {
        log.info("=== DEBUG CONSOLIDATION STRATEGY ===");
        log.info("Posi√ß√£o ANTES: Quantidade total={}, Quantidade restante={}, Pre√ßo m√©dio={}", 
                 context.position().getTotalQuantity(), context.position().getRemainingQuantity(), context.position().getAveragePrice());
        
        // 1. Esconder a opera√ß√£o ativa existente
        context.activeOperation().setStatus(OperationStatus.HIDDEN);
        operationRepository.save(context.activeOperation());

        // 2. Criar nova opera√ß√£o oculta baseada na requisi√ß√£o
        Operation hiddenOperation = creationService.createHiddenOperation(
                context.request(), context.optionSerie(), context.currentUser());
        averageOperationService.addNewItemGroup(context.group(), hiddenOperation, OperationRoleType.NEW_ENTRY);

        // ‚úÖ CORRE√á√ÉO: Verificar se √© opera√ß√£o de venda para consumir posi√ß√£o
        if (context.request().getTransactionType() == TransactionType.SELL) {
            log.info("üîÑ Opera√ß√£o de VENDA detectada - consumindo posi√ß√£o existente");
            // Consumir a posi√ß√£o em vez de adicionar
            positionService.consumePositionForExit(context.position(), hiddenOperation);
        } else {
            log.info("üì• Opera√ß√£o de COMPRA detectada - adicionando √† posi√ß√£o existente");
            // Adicionar opera√ß√£o √† posi√ß√£o existente
            positionService.addEntryToPosition(context.position(), hiddenOperation);
        }
        
        log.info("Posi√ß√£o AP√ìS processamento: Quantidade total={}, Quantidade restante={}, Pre√ßo m√©dio={}", 
                 context.position().getTotalQuantity(), context.position().getRemainingQuantity(), context.position().getAveragePrice());

        // 4. Criar opera√ß√£o consolidada
        Operation consolidatedEntry = creationService.createConsolidatedOperation(
                context.activeOperation(), context.optionSerie(), context.currentUser());
        averageOperationService.addNewItemGroup(
                context.itemGroup().getGroup(), consolidatedEntry, OperationRoleType.CONSOLIDATED_ENTRY);

        // 5. Atualizar valores e estruturas relacionadas
        log.info("Chamando consolidateOperationEntryValues...");
        consolidateService.consolidateOperationEntryValues(consolidatedEntry, context.position());
        log.info("Posi√ß√£o AP√ìS consolidate: Quantidade total={}, Quantidade restante={}, Pre√ßo m√©dio={}", 
                 context.position().getTotalQuantity(), context.position().getRemainingQuantity(), context.position().getAveragePrice());
        
        averageOperationService.updateAverageOperationGroup(context.group(), context.position());
        
        log.info("Opera√ß√£o consolidada final: quantidade={}, pre√ßo={}, valor total={}", 
                 consolidatedEntry.getQuantity(), consolidatedEntry.getEntryUnitPrice(), consolidatedEntry.getEntryTotalValue());
        log.info("=== FIM CONSOLIDATION STRATEGY ===");

        return consolidatedEntry;
    }

    @Transactional
    public Operation processSimpleAdditionStrategy(ExistingOperationContext context) {
        log.info("=== DEBUG SIMPLE ADDITION STRATEGY ===");
        log.info("Posi√ß√£o ANTES: Quantidade total={}, Quantidade restante={}, Pre√ßo m√©dio={}", 
                 context.position().getTotalQuantity(), context.position().getRemainingQuantity(), context.position().getAveragePrice());
        
        // 1. Criar opera√ß√£o oculta para a entrada adicional
        Operation hiddenOperation = creationService.createHiddenOperation(
                context.request(), context.optionSerie(), context.currentUser());
        averageOperationService.addNewItemGroup(context.group(), hiddenOperation, OperationRoleType.NEW_ENTRY);

        // 2. Atualizar posi√ß√£o e estruturas relacionadas
        log.info("Chamando addEntryToPosition com opera√ß√£o: quantidade={}, pre√ßo={}", 
                 hiddenOperation.getQuantity(), hiddenOperation.getEntryUnitPrice());
        positionService.addEntryToPosition(context.position(), hiddenOperation);
        log.info("Posi√ß√£o AP√ìS addEntryToPosition: Quantidade total={}, Quantidade restante={}, Pre√ßo m√©dio={}", 
                 context.position().getTotalQuantity(), context.position().getRemainingQuantity(), context.position().getAveragePrice());
        
        log.info("Chamando consolidateOperationEntryValues...");
        consolidateService.consolidateOperationEntryValues(context.activeOperation(), context.position());
        log.info("Posi√ß√£o AP√ìS consolidate: Quantidade total={}, Quantidade restante={}, Pre√ßo m√©dio={}", 
                 context.position().getTotalQuantity(), context.position().getRemainingQuantity(), context.position().getAveragePrice());
        
        averageOperationService.updateAverageOperationGroup(context.group(), context.position());
        
        log.info("Opera√ß√£o ativa final: quantidade={}, pre√ßo={}, valor total={}", 
                 context.activeOperation().getQuantity(), context.activeOperation().getEntryUnitPrice(), context.activeOperation().getEntryTotalValue());
        log.info("=== FIM SIMPLE ADDITION STRATEGY ===");

        return context.activeOperation();
    }
}
