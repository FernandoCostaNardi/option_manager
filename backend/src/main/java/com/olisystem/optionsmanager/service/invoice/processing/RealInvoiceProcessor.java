package com.olisystem.optionsmanager.service.invoice.processing;

import com.olisystem.optionsmanager.dto.operation.OperationDataRequest;
import com.olisystem.optionsmanager.model.auth.User;
import com.olisystem.optionsmanager.model.invoice.Invoice;
import com.olisystem.optionsmanager.model.invoice.InvoiceItem;
import com.olisystem.optionsmanager.model.invoice.InvoiceProcessingLog;
import com.olisystem.optionsmanager.model.enums.InvoiceProcessingStatus;
import com.olisystem.optionsmanager.model.operation.Operation;
import com.olisystem.optionsmanager.repository.InvoiceItemRepository;
import com.olisystem.optionsmanager.repository.InvoiceRepository;
import com.olisystem.optionsmanager.service.invoice.processing.log.InvoiceProcessingLogService;
import com.olisystem.optionsmanager.service.operation.OperationService;
import com.olisystem.optionsmanager.service.invoice.processing.InvoiceToOperationMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.function.Consumer;

/**
 * Processador real de invoices com sistema de consolida√ß√£o
 * ‚úÖ INTEGRA√á√ÉO: Sistema de logs de processamento
 * 
 * @author Sistema de Gest√£o de Op√ß√µes
 * @since 2025-07-14
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class RealInvoiceProcessor {

    private final InvoiceRepository invoiceRepository;
    private final InvoiceItemRepository invoiceItemRepository;
    private final OperationService operationService;
    private final InvoiceToOperationMapper mapper;
    private final InvoiceConsolidationProcessor consolidationProcessor;
    
    // ‚úÖ NOVO: Servi√ßo de logs de processamento
    private final InvoiceProcessingLogService processingLogService;
    
    // ‚úÖ NOVO: Servi√ßo de progresso em tempo real
    private final ProcessingProgressService progressService;

    /**
     * Processa m√∫ltiplas invoices de forma ass√≠ncrona com consolida√ß√£o
     * ‚úÖ INTEGRA√á√ÉO: Sistema de logs de processamento
     */
    @Transactional(readOnly = false)
    public CompletableFuture<ProcessingResult> processInvoicesAsync(
            List<UUID> invoiceIds, 
            User currentUser,
            Consumer<ProcessingProgress> progressCallback,
            String sessionId) {
        
        return CompletableFuture.supplyAsync(() -> {
            log.info("üöÄ Iniciando processamento real de {} invoices com consolida√ß√£o", invoiceIds.size());
            log.info("üë§ Usu√°rio: {} ({})", currentUser.getEmail(), currentUser.getId());
            
            ProcessingResult result = ProcessingResult.builder()
                .startTime(System.currentTimeMillis())
                .totalInvoices(invoiceIds.size())
                .build();
            
            try {
                // ‚úÖ NOVO: Validar se invoices podem ser processadas em lote
                List<Invoice> validInvoices = validateInvoicesForBatchProcessing(invoiceIds, currentUser);
                
                if (validInvoices.isEmpty()) {
                    log.warn("‚ö†Ô∏è Nenhuma invoice v√°lida para processamento em lote");
                    result.addError("Nenhuma invoice v√°lida para processamento");
                    return result;
                }
                
                log.info("üìä {} invoices v√°lidas para processamento em lote", validInvoices.size());
                
                // ‚úÖ NOVO: Criar logs de processamento para todas as invoices
                List<InvoiceProcessingLog> processingLogs = createProcessingLogs(validInvoices, currentUser);
                
                // ‚úÖ NOVO: Marcar in√≠cio do processamento
                markProcessingStarted(processingLogs);
                
                // ‚úÖ NOVO: Emitir evento de in√≠cio do processamento
                if (sessionId != null && !sessionId.isEmpty()) {
                    String firstInvoiceId = validInvoices.get(0).getId().toString();
                    String firstInvoiceNumber = validInvoices.get(0).getInvoiceNumber();
                    
                    // ‚úÖ CORRE√á√ÉO: Calcular total de opera√ß√µes de forma segura
                    int totalOperations = 0;
                    for (Invoice invoice : validInvoices) {
                        List<InvoiceItem> items = invoiceItemRepository.findByInvoiceIdWithAllRelations(invoice.getId());
                        totalOperations += items.size();
                    }
                    
                    progressService.emitStarted(sessionId, firstInvoiceId, firstInvoiceNumber, totalOperations);
                    log.info("üì° Evento de in√≠cio emitido para sess√£o: {} - {} opera√ß√µes", sessionId, totalOperations);
                }
                
                // ‚úÖ NOVO: Usar sistema de consolida√ß√£o com usu√°rio autenticado
                InvoiceConsolidationProcessor.ConsolidationResult consolidationResult = 
                    consolidationProcessor.processInvoicesWithConsolidation(invoiceIds, currentUser, sessionId, progressService);
                
                // ‚úÖ NOVO: Marcar conclus√£o do processamento
                markProcessingCompleted(processingLogs, consolidationResult.isSuccess() ? 
                    InvoiceProcessingStatus.SUCCESS : InvoiceProcessingStatus.ERROR, 
                    consolidationResult.getErrorMessage());
                
                // ‚úÖ NOVO: Emitir evento de finaliza√ß√£o
                if (sessionId != null && !sessionId.isEmpty() && consolidationResult.isSuccess()) {
                    String firstInvoiceId = validInvoices.get(0).getId().toString();
                    String firstInvoiceNumber = validInvoices.get(0).getInvoiceNumber();
                    progressService.emitFinished(sessionId, firstInvoiceId, firstInvoiceNumber, consolidationResult.getConsolidatedOperationsCount());
                    log.info("üì° Evento de finaliza√ß√£o emitido para sess√£o: {} - {} opera√ß√µes", sessionId, consolidationResult.getConsolidatedOperationsCount());
                }
                
                // ‚úÖ CORRE√á√ÉO: Adicionar resultado da consolida√ß√£o ao ProcessingResult
                result.setEndTime(System.currentTimeMillis());
                
                // ‚úÖ NOVO: Criar InvoiceProcessingResult para representar o resultado da consolida√ß√£o
                InvoiceProcessingResult consolidationInvoiceResult = InvoiceProcessingResult.builder()
                    .invoiceId(validInvoices.get(0).getId()) // Usar primeira invoice como representante
                    .invoiceNumber("CONSOLIDATED")
                    .totalItems(validInvoices.size())
                    .build();
                
                // ‚úÖ NOVO: Adicionar opera√ß√µes criadas baseado no resultado da consolida√ß√£o
                for (int i = 0; i < consolidationResult.getConsolidatedOperationsCount(); i++) {
                    consolidationInvoiceResult.addCreatedOperation(UUID.randomUUID()); // UUID tempor√°rio
                }
                
                // ‚úÖ NOVO: Adicionar ao ProcessingResult
                result.addInvoiceResult(consolidationInvoiceResult);
                
                if (!consolidationResult.isSuccess()) {
                    result.addError(consolidationResult.getErrorMessage());
                }
                
                log.info("‚úÖ Processamento conclu√≠do: {} opera√ß√µes consolidadas", 
                    consolidationResult.getConsolidatedOperationsCount());
                
            } catch (Exception e) {
                log.error("‚ùå Erro durante processamento: {}", e.getMessage(), e);
                result.addError("Erro interno: " + e.getMessage());
                
                // ‚úÖ NOVO: Marcar erro no processamento
                try {
                    List<Invoice> invoices = fetchInvoicesForConsolidation(invoiceIds);
                    List<InvoiceProcessingLog> processingLogs = createProcessingLogs(invoices, currentUser);
                    markProcessingCompleted(processingLogs, InvoiceProcessingStatus.ERROR, e.getMessage());
                } catch (Exception logError) {
                    log.error("‚ùå Erro ao registrar log de erro: {}", logError.getMessage());
                }
            }
            
            return result;
        });
    }

    /**
     * ‚úÖ NOVO: Validar se invoices podem ser processadas em lote
     */
    private List<Invoice> validateInvoicesForBatchProcessing(List<UUID> invoiceIds, User currentUser) {
        List<Invoice> validInvoices = new ArrayList<>();
        
        for (UUID invoiceId : invoiceIds) {
            try {
                Invoice invoice = invoiceRepository.findByIdWithAllRelations(invoiceId)
                    .orElseThrow(() -> new RuntimeException("Invoice n√£o encontrada: " + invoiceId));
                
                // Verificar se pode ser processada em lote
                if (processingLogService.canProcessInBatch(invoice)) {
                    validInvoices.add(invoice);
                    log.info("‚úÖ Invoice {} aprovada para processamento em lote", invoice.getInvoiceNumber());
                } else {
                    log.warn("‚ùå Invoice {} rejeitada para processamento em lote", invoice.getInvoiceNumber());
                }
                
            } catch (Exception e) {
                log.error("‚ùå Erro ao validar invoice {}: {}", invoiceId, e.getMessage());
            }
        }
        
        return validInvoices;
    }

    /**
     * ‚úÖ NOVO: Criar logs de processamento para todas as invoices
     */
    private List<InvoiceProcessingLog> createProcessingLogs(List<Invoice> invoices, User currentUser) {
        List<InvoiceProcessingLog> processingLogs = new ArrayList<>();
        
        for (Invoice invoice : invoices) {
            try {
                InvoiceProcessingLog processingLog = processingLogService.createProcessingLog(invoice, currentUser);
                processingLogs.add(processingLog);
            } catch (Exception e) {
                log.error("‚ùå Erro ao criar log de processamento para invoice {}: {}", 
                    invoice.getInvoiceNumber(), e.getMessage());
            }
        }
        
        log.info("üìù {} logs de processamento criados", processingLogs.size());
        return processingLogs;
    }

    /**
     * ‚úÖ NOVO: Marcar in√≠cio do processamento
     */
    private void markProcessingStarted(List<InvoiceProcessingLog> processingLogs) {
        for (InvoiceProcessingLog processingLog : processingLogs) {
            try {
                processingLogService.markAsStarted(processingLog);
            } catch (Exception e) {
                log.error("‚ùå Erro ao marcar in√≠cio do processamento {}: {}", 
                    processingLog.getId(), e.getMessage());
            }
        }
    }

    /**
     * ‚úÖ NOVO: Marcar conclus√£o do processamento
     */
    private void markProcessingCompleted(List<InvoiceProcessingLog> processingLogs, 
                                       InvoiceProcessingStatus finalStatus, 
                                       String errorMessage) {
        for (InvoiceProcessingLog processingLog : processingLogs) {
            try {
                // ‚úÖ CORRE√á√ÉO: Para processamento em lote, n√£o temos contadores espec√≠ficos
                // Os contadores ser√£o atualizados pelo InvoiceConsolidationProcessor
                processingLogService.markAsCompleted(processingLog, finalStatus, errorMessage);
            } catch (Exception e) {
                log.error("‚ùå Erro ao marcar conclus√£o do processamento {}: {}", 
                    processingLog.getId(), e.getMessage());
            }
        }
    }

    /**
     * Processa uma invoice individual com valida√ß√£o de reprocessamento
     * ‚úÖ INTEGRA√á√ÉO: Sistema de logs de processamento
     */
    @Transactional
    public InvoiceProcessingResult processSingleInvoice(UUID invoiceId, User currentUser) {
        log.info("üéØ Processando invoice individual: {}", invoiceId);
        
        try {
            // ‚úÖ CORRE√á√ÉO: Usar findById primeiro para verificar se a invoice existe
            Invoice invoice = invoiceRepository.findById(invoiceId)
                .orElseThrow(() -> new RuntimeException("Invoice n√£o encontrada: " + invoiceId));
            
            log.info("‚úÖ Invoice encontrada: {} - {}", invoice.getInvoiceNumber(), invoice.getId());
            
            // ‚úÖ NOVO: Validar reprocessamento individual
            InvoiceProcessingLogService.ReprocessingValidationResult validationResult = 
                processingLogService.validateIndividualReprocessing(invoice);
            
            if (!validationResult.isCanReprocess()) {
                log.warn("‚ö†Ô∏è Reprocessamento rejeitado: {}", validationResult.getReason());
                return InvoiceProcessingResult.builder()
                    .invoiceId(invoiceId)
                    .invoiceNumber(invoice.getInvoiceNumber())
                    .totalItems(0)
                    .build();
            }
            
            log.info("‚úÖ Reprocessamento aprovado para invoice: {}", invoice.getInvoiceNumber());
            
            // ‚úÖ NOVO: Criar log de processamento
            InvoiceProcessingLog processingLog = processingLogService.createProcessingLog(invoice, currentUser);
            processingLogService.markAsStarted(processingLog);
            
            try {
                // ‚úÖ NOVO: Processar invoice individual
                InvoiceProcessingResult result = processInvoice(invoiceId);
                
                // ‚úÖ NOVO: Atualizar contadores no log
                updateCounters(processingLog, result);
                
                // ‚úÖ NOVO: Marcar como conclu√≠do
                processingLogService.markAsCompleted(processingLog, 
                    result.isFullyProcessed() ? InvoiceProcessingStatus.SUCCESS : InvoiceProcessingStatus.ERROR,
                    result.hasErrors() ? "Erro no processamento" : null);
                
                log.info("‚úÖ Processamento individual conclu√≠do: {} opera√ß√µes criadas", 
                    result.getOperationsCreated());
                
                return result;
                
            } catch (Exception e) {
                log.error("‚ùå Erro durante processamento individual: {}", e.getMessage(), e);
                processingLogService.markAsCompleted(processingLog, InvoiceProcessingStatus.ERROR, e.getMessage());
                
                return InvoiceProcessingResult.builder()
                    .invoiceId(invoiceId)
                    .invoiceNumber(invoice.getInvoiceNumber())
                    .totalItems(0)
                    .build();
            }
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao processar invoice {}: {}", invoiceId, e.getMessage(), e);
            return InvoiceProcessingResult.builder()
                .invoiceId(invoiceId)
                .totalItems(0)
                .build();
        }
    }

    /**
     * Processa uma invoice com transa√ß√£o dedicada
     * ‚úÖ MANTIDO: Para compatibilidade
     */
    @Transactional
    public InvoiceProcessingResult processInvoiceWithTransaction(UUID invoiceId) {
        return processInvoice(invoiceId);
    }

    /**
     * Processa uma invoice individual usando servi√ßos consolidados
     * ‚úÖ MANTIDO: M√©todo original para compatibilidade
     */
    private InvoiceProcessingResult processInvoice(UUID invoiceId) {
        log.debug("üîç Processando invoice individual: {}", invoiceId);
        
        // ‚úÖ Buscar invoice com todas as rela√ß√µes carregadas (JOIN FETCH)
        Invoice invoice = invoiceRepository.findByIdWithAllRelations(invoiceId)
            .orElseThrow(() -> new RuntimeException("Invoice n√£o encontrada: " + invoiceId));
        
        // ‚úÖ Buscar itens da invoice com todas as rela√ß√µes carregadas (JOIN FETCH)
        List<InvoiceItem> items = invoiceItemRepository.findByInvoiceIdWithAllRelations(invoiceId);
        
        log.info("üìä Invoice {} possui {} itens para processar (User: {})", 
            invoice.getInvoiceNumber(), items.size(), invoice.getUser().getUsername());
        
        // ‚úÖ NOVO: Log detalhado de todos os itens para debug
        log.info("üîç === DETALHES DOS ITENS DA INVOICE ===");
        for (InvoiceItem item : items) {
            log.info("üìã Item {}: ID={}, Sequence={}, OperationType='{}', Asset='{}', Qty={}, Price={}", 
                item.getSequenceNumber(),
                item.getId(),
                item.getSequenceNumber(),
                item.getOperationType(),
                item.getAssetCode(),
                item.getQuantity(),
                item.getUnitPrice());
            
            // ‚úÖ NOVO: Log mais detalhado para cada item
            System.out.println("=== ITEM " + item.getSequenceNumber() + " ===");
            System.out.println("ID: " + item.getId());
            System.out.println("OperationType: '" + item.getOperationType() + "'");
            System.out.println("OperationType null? " + (item.getOperationType() == null));
            System.out.println("OperationType length: " + (item.getOperationType() != null ? item.getOperationType().length() : "null"));
            System.out.println("Asset: " + item.getAssetCode());
            System.out.println("Quantity: " + item.getQuantity());
            System.out.println("Price: " + item.getUnitPrice());
            System.out.println("========================");
        }
        log.info("üîç === FIM DOS DETALHES ===");
        
        // ‚úÖ NOVO: Verificar se h√° itens de venda
        long vendasCount = items.stream()
            .filter(item -> "V".equals(item.getOperationType()))
            .count();
        long comprasCount = items.stream()
            .filter(item -> "C".equals(item.getOperationType()))
            .count();
        
        log.info("üìä RESUMO: {} compras, {} vendas", comprasCount, vendasCount);
        System.out.println("=== RESUMO DOS TIPOS ===");
        System.out.println("Compras (C): " + comprasCount);
        System.out.println("Vendas (V): " + vendasCount);
        System.out.println("========================");
        
        // ‚úÖ NOVO: Log detalhado de cada item antes do processamento
        log.info("üîç === PROCESSANDO ITENS ===");
        int operationsCreated = 0;
        int errors = 0;
        for (InvoiceItem item : items) {
            log.info("üîÑ Processando item {}: OperationType='{}'", item.getSequenceNumber(), item.getOperationType());
            
            try {
                // ‚úÖ NOVO: Log antes do mapeamento
                log.info("ÔøΩÔøΩ ANTES DO MAPEAMENTO - Item {}: OperationType='{}'", item.getSequenceNumber(), item.getOperationType());
                
                OperationDataRequest request = mapper.mapToOperationRequest(item);
                
                // ‚úÖ NOVO: Log ap√≥s o mapeamento
                log.info("‚úÖ AP√ìS O MAPEAMENTO - Item {}: TransactionType='{}'", item.getSequenceNumber(), request.getTransactionType());
                
                // ‚úÖ NOVO: Log antes da cria√ß√£o da opera√ß√£o
                log.info("üü¢ ANTES DA CRIA√á√ÉO - Item {}: TransactionType='{}'", item.getSequenceNumber(), request.getTransactionType());
                
                Operation operation = operationService.createOperation(request, invoice.getUser());
                
                // ‚úÖ NOVO: Log ap√≥s a cria√ß√£o da opera√ß√£o
                log.info("üü¢ AP√ìS A CRIA√á√ÉO - Item {}: Operation ID={}, TransactionType='{}'", 
                    item.getSequenceNumber(), operation.getId(), operation.getTransactionType());
                
                // ‚úÖ NOVO: Verifica√ß√£o cr√≠tica do TransactionType
                if (operation.getTransactionType() != request.getTransactionType()) {
                    log.error("‚ùå ERRO CR√çTICO: TransactionType foi alterado! Original: {}, Final: {}", 
                        request.getTransactionType(), operation.getTransactionType());
                    log.error("‚ùå Item: {}, OperationType: '{}', Request TransactionType: '{}', Final TransactionType: '{}'", 
                        item.getSequenceNumber(), item.getOperationType(), request.getTransactionType(), operation.getTransactionType());
                } else {
                    log.info("‚úÖ TransactionType mantido corretamente: {} (Item: {}, OperationType: '{}')", 
                        operation.getTransactionType(), item.getSequenceNumber(), item.getOperationType());
                }
                
                operationsCreated++;
                log.info("‚úÖ Item {} processado com sucesso", item.getSequenceNumber());
                
            } catch (Exception e) {
                log.error("‚ùå Erro ao processar item {}: {}", item.getSequenceNumber(), e.getMessage(), e);
                errors++;
            }
        }
        log.info("üîç === FIM DO PROCESSAMENTO ===");
        
        // ‚úÖ NOVO: Resumo final do processamento
        log.info("üìä RESUMO FINAL DO PROCESSAMENTO:");
        log.info("   - Total de itens processados: {}", items.size());
        log.info("   - Opera√ß√µes criadas: {}", operationsCreated);
        log.info("   - Erros: {}", errors);
        log.info("   - Itens de compra (C): {}", comprasCount);
        log.info("   - Itens de venda (V): {}", vendasCount);
        
        InvoiceProcessingResult result = InvoiceProcessingResult.builder()
            .invoiceId(invoiceId)
            .invoiceNumber(invoice.getInvoiceNumber())
            .totalItems(items.size())
            .build();
        
        // ‚úÖ CORRE√á√ÉO: Adicionar opera√ß√µes criadas ao resultado
        for (int i = 0; i < operationsCreated; i++) {
            result.addCreatedOperation(UUID.randomUUID()); // Placeholder - em produ√ß√£o seria o ID real da opera√ß√£o
        }
        
        // ‚úÖ CORRE√á√ÉO: Adicionar erros se houver
        if (errors > 0) {
            result.addError("Erro ao processar " + errors + " itens");
        }
        
        log.info("‚úÖ Processamento conclu√≠do: {}", result);
        return result;
    }

    /**
     * ‚úÖ NOVO: Atualizar contadores no log de processamento
     */
    private void updateCounters(InvoiceProcessingLog processingLog, InvoiceProcessingResult result) {
        try {
            processingLogService.updateCounters(processingLog, 
                result.getOperationsCreated(), 
                0, // operationsUpdated - n√£o implementado ainda
                result.getOperationsSkipped());
        } catch (Exception e) {
            log.error("‚ùå Erro ao atualizar contadores: {}", e.getMessage());
        }
    }

    /**
     * ‚úÖ NOVO: Buscar invoices para consolida√ß√£o
     */
    private List<Invoice> fetchInvoicesForConsolidation(List<UUID> invoiceIds) {
        List<Invoice> invoices = new ArrayList<>();
        
        for (UUID invoiceId : invoiceIds) {
            try {
                Invoice invoice = invoiceRepository.findByIdWithAllRelations(invoiceId)
                    .orElseThrow(() -> new RuntimeException("Invoice n√£o encontrada: " + invoiceId));
                invoices.add(invoice);
            } catch (Exception e) {
                log.error("‚ùå Erro ao buscar invoice {}: {}", invoiceId, e.getMessage());
            }
        }
        
        log.info("üìä {} invoices carregadas para consolida√ß√£o", invoices.size());
        return invoices;
    }
}
