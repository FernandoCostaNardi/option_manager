package com.olisystem.optionsmanager.service.operation.detector;

import com.olisystem.optionsmanager.model.operation.AverageOperationGroup;
import com.olisystem.optionsmanager.model.position.Position;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Component
@Slf4j
public class PartialExitDetector {

    /**
     * Verifica se √© a primeira sa√≠da parcial de uma posi√ß√£o
     *
     * @param position Posi√ß√£o atual
     * @return true se √© a primeira sa√≠da parcial
     */
    public boolean isFirstPartialExit(Position position) {

        if (position == null) {
            return false;
        }

        // √â primeira sa√≠da parcial se:
        // 1. Posi√ß√£o est√° OPEN (nunca teve sa√≠da)
        // 2. Quantidade total ainda √© igual √† original (sem sa√≠das anteriores)
        boolean isFirst = position.getStatus() == com.olisystem.optionsmanager.model.position.PositionStatus.OPEN
                && position.getRemainingQuantity().equals(position.getTotalQuantity());

        log.debug("Verificando primeira sa√≠da parcial - Position ID: {}, Status: {}, " +
                        "Quantidade restante: {}, Quantidade total: {}, √â primeira: {}",
                position.getId(), position.getStatus(),
                position.getRemainingQuantity(), position.getTotalQuantity(), isFirst);

        return isFirst;
    }

    /**
     * Verifica se √© uma sa√≠da parcial subsequente (n√£o √© a primeira)
     *
     * @param position Posi√ß√£o atual
     * @return true se √© sa√≠da parcial subsequente
     */
    public boolean isSubsequentPartialExit(Position position) {

        if (position == null) {
            return false;
        }

        // √â sa√≠da subsequente se:
        // 1. Posi√ß√£o est√° PARTIAL (j√° teve sa√≠das anteriores)
        // 2. Ainda tem quantidade restante
        boolean isSubsequent = position.getStatus() == com.olisystem.optionsmanager.model.position.PositionStatus.PARTIAL
                && position.getRemainingQuantity() > 0;

        log.debug("Verificando sa√≠da parcial subsequente - Position ID: {}, Status: {}, " +
                        "Quantidade restante: {}, √â subsequente: {}",
                position.getId(), position.getStatus(), position.getRemainingQuantity(), isSubsequent);

        return isSubsequent;
    }

    /**
     * Verifica se √© uma sa√≠da final (fecha a posi√ß√£o completamente)
     *
     * @param position          Posi√ß√£o atual
     * @param requestedQuantity Quantidade solicitada na sa√≠da
     * @return true se √© sa√≠da final
     */
    public boolean isFinalExit(Position position, Integer requestedQuantity) {

        if (position == null || requestedQuantity == null) {
            return false;
        }

        // √â sa√≠da final se a quantidade solicitada √© igual √† quantidade restante
        boolean isFinal = position.getRemainingQuantity().equals(requestedQuantity);

        log.debug("Verificando sa√≠da final - Position ID: {}, Quantidade restante: {}, " +
                        "Quantidade solicitada: {}, √â final: {}",
                position.getId(), position.getRemainingQuantity(), requestedQuantity, isFinal);

        return isFinal;
    }

    /**
     * Verifica se √© uma sa√≠da parcial (n√£o fecha a posi√ß√£o)
     *
     * @param position          Posi√ß√£o atual
     * @param requestedQuantity Quantidade solicitada na sa√≠da
     * @return true se √© sa√≠da parcial
     */
    public boolean isPartialExit(Position position, Integer requestedQuantity) {

        if (position == null || requestedQuantity == null) {
            return false;
        }

        // √â sa√≠da parcial se a quantidade solicitada √© menor que a restante
        boolean isPartial = requestedQuantity < position.getRemainingQuantity();

        log.debug("Verificando sa√≠da parcial - Position ID: {}, Quantidade restante: {}, " +
                        "Quantidade solicitada: {}, √â parcial: {}",
                position.getId(), position.getRemainingQuantity(), requestedQuantity, isPartial);

        return isPartial;
    }

    /**
     * Verifica se j√° existem opera√ß√µes consolidadoras para esta posi√ß√£o
     *
     * @param group Grupo de opera√ß√µes
     * @return true se j√° existem consolidadoras
     */
    public boolean hasConsolidatedOperations(AverageOperationGroup group) {

        if (group == null || group.getItems() == null) {
            return false;
        }

        // Verificar se existe algum item com roleType de consolida√ß√£o
        boolean hasConsolidated = group.getItems().stream()
                .anyMatch(item -> item.getRoleType() != null &&
                        (item.getRoleType().name().equals("CONSOLIDATED_ENTRY") ||
                                item.getRoleType().name().equals("CONSOLIDATED_RESULT")));

        log.debug("Verificando opera√ß√µes consolidadas - Group ID: {}, " +
                        "Total items: {}, Tem consolidadas: {}",
                group.getId(), group.getItems().size(), hasConsolidated);

        return hasConsolidated;
    }

    /**
     * Determina o tipo de sa√≠da baseado no contexto
     *
     * @param position          Posi√ß√£o atual
     * @param requestedQuantity Quantidade solicitada
     * @return Tipo de sa√≠da detectado
     */
    public ExitType determineExitType(Position position, Integer requestedQuantity) {

        log.info("=== DETERMINANDO TIPO DE SA√çDA ===");
        log.info("Position ID: {}", position.getId());
        log.info("Status atual: {}", position.getStatus());
        log.info("Quantidade restante: {}", position.getRemainingQuantity());
        log.info("Quantidade total: {}", position.getTotalQuantity());
        log.info("Quantidade solicitada: {}", requestedQuantity);

        // ‚úÖ VALIDA√á√ÉO ADICIONAL: Verificar consist√™ncia b√°sica
        if (requestedQuantity > position.getRemainingQuantity()) {
            log.error("‚ùå ERRO: Quantidade solicitada ({}) maior que dispon√≠vel ({})", 
                    requestedQuantity, position.getRemainingQuantity());
            return ExitType.UNKNOWN;
        }

        boolean isFinal = isFinalExit(position, requestedQuantity);
        boolean isFirst = isFirstPartialExit(position);
        boolean isSubsequent = isSubsequentPartialExit(position);

        log.info("An√°lise de tipos:");
        log.info("  - √â sa√≠da final? {}", isFinal);
        log.info("  - √â primeira parcial? {}", isFirst);
        log.info("  - √â sa√≠da subsequente? {}", isSubsequent);

        ExitType result;
        if (isFinal) {
            if (isFirst) {
                result = ExitType.SINGLE_TOTAL_EXIT; // Sa√≠da √∫nica que fecha tudo
                log.info("üéØ TIPO DETECTADO: SINGLE_TOTAL_EXIT (primeira e √∫nica sa√≠da)");
            } else {
                result = ExitType.FINAL_PARTIAL_EXIT; // √öltima de uma s√©rie de sa√≠das parciais
                log.info("üéØ TIPO DETECTADO: FINAL_PARTIAL_EXIT (√∫ltima de v√°rias sa√≠das)");
            }
        } else if (isFirst) {
            result = ExitType.FIRST_PARTIAL_EXIT;
            log.info("üéØ TIPO DETECTADO: FIRST_PARTIAL_EXIT (primeira de v√°rias sa√≠das)");
        } else if (isSubsequent) {
            result = ExitType.SUBSEQUENT_PARTIAL_EXIT;
            log.info("üéØ TIPO DETECTADO: SUBSEQUENT_PARTIAL_EXIT (segunda, terceira, etc.)");
        } else {
            result = ExitType.UNKNOWN;
            log.error("‚ùå TIPO DESCONHECIDO - Combina√ß√£o de condi√ß√µes inv√°lida!");
            log.error("Position: status={}, remaining={}, total={}, requested={}", 
                    position.getStatus(), position.getRemainingQuantity(), 
                    position.getTotalQuantity(), requestedQuantity);
        }

        log.info("=== RESULTADO: {} ===", result);
        return result;
    }

    /**
     * Enum para tipos de sa√≠da detectados
     */
    public enum ExitType {
        FIRST_PARTIAL_EXIT,       // Primeira sa√≠da parcial - criar consolidadoras
        SUBSEQUENT_PARTIAL_EXIT,  // Sa√≠da parcial subsequente - atualizar consolidadoras
        FINAL_PARTIAL_EXIT,       // √öltima sa√≠da parcial - finalizar consolidadoras
        SINGLE_TOTAL_EXIT,        // Sa√≠da √∫nica total - n√£o precisa consolidadoras
        UNKNOWN                   // Tipo n√£o identificado
    }

    /**
     * Valida se a quantidade solicitada √© v√°lida para a posi√ß√£o
     *
     * @param position          Posi√ß√£o atual
     * @param requestedQuantity Quantidade solicitada
     * @return true se √© v√°lida
     */
    public boolean validateExitQuantity(Position position, Integer requestedQuantity) {

        if (position == null || requestedQuantity == null) {
            log.error("Position ou quantidade solicitada s√£o nulos");
            return false;
        }

        if (requestedQuantity <= 0) {
            log.error("Quantidade solicitada deve ser maior que zero: {}", requestedQuantity);
            return false;
        }

        if (requestedQuantity > position.getRemainingQuantity()) {
            log.error("Quantidade solicitada ({}) excede quantidade dispon√≠vel ({})",
                    requestedQuantity, position.getRemainingQuantity());
            return false;
        }

        return true;
    }

    /**
     * Log detalhado do tipo de sa√≠da detectado
     */
    public void logExitTypeDetails(ExitType exitType, Position position, Integer requestedQuantity) {

        log.info("=== TIPO DE SA√çDA DETECTADO ===");
        log.info("Tipo: {}", exitType);
        log.info("Position ID: {}", position.getId());
        log.info("Status atual: {}", position.getStatus());
        log.info("Quantidade restante: {}", position.getRemainingQuantity());
        log.info("Quantidade total: {}", position.getTotalQuantity());
        log.info("Quantidade solicitada: {}", requestedQuantity);
        log.info("===============================");
    }
}
