package com.olisystem.optionsmanager.service.operation.strategy.processor;

import com.olisystem.optionsmanager.model.operation.Operation;
import com.olisystem.optionsmanager.record.operation.OperationExitPositionContext;
import com.olisystem.optionsmanager.service.operation.consolidate.ConsolidatedOperationService;
import com.olisystem.optionsmanager.service.operation.detector.PartialExitDetector;
import com.olisystem.optionsmanager.service.operation.detector.ComplexScenarioDetector;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class ExitProcessorSelector {

    private final SingleLotExitProcessor singleLotProcessor;
    private final MultipleLotExitProcessor multipleLotProcessor;
    private final PartialExitProcessor partialExitProcessor;
    private final ComplexScenarioProcessor complexScenarioProcessor;
    private final PartialExitDetector partialExitDetector;
    private final ComplexScenarioDetector complexScenarioDetector;
    private final ConsolidatedOperationService consolidatedOperationService;

    /**
     * Seleciona o processador apropriado baseado no contexto da opera√ß√£o
     * CORRIGIDO: Usando l√≥gica completa de detec√ß√£o de cen√°rios
     */
    public Operation selectAndProcess(OperationExitPositionContext context) {

        validateContext(context);

        int lotCount = context.availableLots().size();
        Integer requestedQuantity = context.context().request().getQuantity();

        log.info("Selecionando processador: {} lotes, quantidade solicitada: {}, quantidade restante: {}",
                lotCount, requestedQuantity, context.position().getRemainingQuantity());

        // üîß CORRE√á√ÉO: Verificar cen√°rio complexo primeiro
        if (complexScenarioDetector.isComplexScenario(context.position(), requestedQuantity)) {
            ComplexScenarioDetector.ScenarioType scenario = complexScenarioDetector.detectScenario(
                    context.position(), requestedQuantity);
            log.info("Cen√°rio complexo detectado: {} - usando ComplexScenarioProcessor", scenario);
            return complexScenarioProcessor.process(context);
        }

        // üîß CORRE√á√ÉO: Verificar se √© uma posi√ß√£o que j√° teve sa√≠das parciais
        boolean hasConsolidatedOperations = consolidatedOperationService.hasConsolidatedOperations(
                context.position().getUser(), 
                context.position().getOptionSeries(), 
                context.position().getBrokerage()
        );
        
        log.info("Posi√ß√£o tem opera√ß√µes consolidadas: {}", hasConsolidatedOperations);
        
        // üîß CORRE√á√ÉO: Se j√° tem opera√ß√µes consolidadas, usar PartialExitProcessor
        if (hasConsolidatedOperations) {
            log.info("‚úÖ Posi√ß√£o com opera√ß√µes consolidadas - usando PartialExitProcessor");
            return partialExitProcessor.process(context);
        }
        
        // üîß CORRE√á√ÉO: Para posi√ß√µes sem consolidadas, usar l√≥gica baseada em lotes
        if (lotCount == 1) {
            PartialExitDetector.ExitType exitType = partialExitDetector.determineExitType(
                    context.position(), requestedQuantity);

            log.info("Lote √∫nico - Tipo de sa√≠da detectado: {}", exitType);

            switch (exitType) {
                case SINGLE_TOTAL_EXIT:
                    log.info("‚úÖ Usando SingleLotExitProcessor para sa√≠da total √∫nica");
                    return singleLotProcessor.process(context);
                    
                case FIRST_PARTIAL_EXIT:
                case SUBSEQUENT_PARTIAL_EXIT:
                case FINAL_PARTIAL_EXIT:
                    log.info("‚úÖ Usando PartialExitProcessor para sa√≠da parcial tipo: {}", exitType);
                    return partialExitProcessor.process(context);
                    
                default:
                    log.warn("‚ùå Tipo de sa√≠da n√£o reconhecido: {} - usando SingleLotExitProcessor como fallback", exitType);
                    return singleLotProcessor.process(context);
            }
        }
        else if (lotCount > 1) {
            // M√∫ltiplos lotes simples - usar MultipleLotExitProcessor
            log.info("M√∫ltiplos lotes detectados - usando MultipleLotExitProcessor");
            return multipleLotProcessor.process(context);
        }
        else {
            // Nenhum lote dispon√≠vel - erro
            throw new IllegalStateException("Nenhum lote dispon√≠vel para processamento");
        }
    }

    /**
     * M√©todo auxiliar para logging detalhado da sele√ß√£o
     */
    private void logProcessorSelection(OperationExitPositionContext context, String selectedProcessor) {

        log.debug("=== SELE√á√ÉO DE PROCESSADOR ===");
        log.debug("Opera√ß√£o ID: {}", context.context().activeOperation().getId());
        log.debug("Posi√ß√£o ID: {}", context.position().getId());
        log.debug("Status da posi√ß√£o: {}", context.position().getStatus());
        log.debug("Lotes dispon√≠veis: {}", context.availableLots().size());
        log.debug("Quantidade restante: {}", context.position().getRemainingQuantity());
        log.debug("Quantidade solicitada: {}", context.context().request().getQuantity());
        log.debug("Processador selecionado: {}", selectedProcessor);
        log.debug("=============================");
    }

    /**
     * Verifica se o contexto √© v√°lido para processamento
     */
    private void validateContext(OperationExitPositionContext context) {

        if (context == null) {
            throw new IllegalArgumentException("Contexto de sa√≠da n√£o pode ser nulo");
        }

        if (context.availableLots() == null) {
            throw new IllegalArgumentException("Lista de lotes dispon√≠veis n√£o pode ser nula");
        }

        if (context.position() == null) {
            throw new IllegalArgumentException("Posi√ß√£o n√£o pode ser nula");
        }

        if (context.context() == null || context.context().request() == null) {
            throw new IllegalArgumentException("Request de finaliza√ß√£o n√£o pode ser nulo");
        }
    }

    /**
     * M√©todo p√∫blico para testar a sele√ß√£o sem processar
     * √ötil para debugging e testes
     */
    public String getSelectedProcessorName(OperationExitPositionContext context) {

        validateContext(context);

        int lotCount = context.availableLots().size();
        Integer requestedQuantity = context.context().request().getQuantity();

        // Verificar cen√°rio complexo primeiro
        if (complexScenarioDetector.isComplexScenario(context.position(), requestedQuantity)) {
            ComplexScenarioDetector.ScenarioType scenario = complexScenarioDetector.detectScenario(
                context.position(), requestedQuantity);
            return "ComplexScenarioProcessor (" + scenario + ")";
        }

        if (lotCount == 1) {
            PartialExitDetector.ExitType exitType = partialExitDetector.determineExitType(
                    context.position(), requestedQuantity);

            switch (exitType) {
                case SINGLE_TOTAL_EXIT:
                    return "SingleLotExitProcessor";
                case FIRST_PARTIAL_EXIT:
                case SUBSEQUENT_PARTIAL_EXIT:
                case FINAL_PARTIAL_EXIT:
                    return "PartialExitProcessor";
                default:
                    return "SingleLotExitProcessor (fallback)";
            }
        } else if (lotCount > 1) {
            return "MultipleLotExitProcessor";
        } else {
            return "ERROR - Nenhum lote dispon√≠vel";
        }
    }
}
