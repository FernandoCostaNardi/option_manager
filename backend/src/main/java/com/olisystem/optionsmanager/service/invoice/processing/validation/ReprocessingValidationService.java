package com.olisystem.optionsmanager.service.invoice.processing.validation;

import com.olisystem.optionsmanager.model.auth.User;
import com.olisystem.optionsmanager.model.invoice.Invoice;
import com.olisystem.optionsmanager.model.invoice.InvoiceItem;
import com.olisystem.optionsmanager.repository.InvoiceItemRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * Servi√ßo de valida√ß√£o para reprocessamento de invoices
 * ‚úÖ CORRE√á√ÉO: Usa reposit√≥rio em vez de acessar cole√ß√£o lazy
 * 
 * @author Sistema de Gest√£o de Op√ß√µes
 * @since 2025-07-14
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ReprocessingValidationService {

    private final InvoiceItemRepository invoiceItemRepository;

    // Configura√ß√µes de reprocessamento
    private static final int MAX_REPROCESSING_ATTEMPTS = 3;
    private static final int MIN_REPROCESSING_INTERVAL_HOURS = 1;

    /**
     * Valida se uma invoice pode ser reprocessada
     * ‚úÖ CORRE√á√ÉO: Usa reposit√≥rio para buscar itens
     */
    public ReprocessingValidationResult validateReprocessing(Invoice invoice, User user) {
        log.info("üîç Validando reprocessamento da invoice: {} (User: {})", 
            invoice.getInvoiceNumber(), user.getEmail());
        
        ReprocessingValidationResult result = ReprocessingValidationResult.builder()
            .canReprocess(true)
            .build();
        
        try {
            // ‚úÖ CORRE√á√ÉO: Buscar itens via reposit√≥rio
            List<InvoiceItem> items = invoiceItemRepository.findByInvoiceIdWithAllRelations(invoice.getId());
            
            // Validar se a invoice tem itens v√°lidos
            validateInvoiceItems(items, result);
            
            // Validar se o usu√°rio tem permiss√£o
            validateUserPermission(invoice, user, result);
            
            // Validar hist√≥rico de reprocessamento
            validateReprocessingHistory(invoice, result);
            
            // Validar intervalo m√≠nimo
            validateReprocessingInterval(invoice, result);
            
            log.info("‚úÖ Valida√ß√£o de reprocessamento conclu√≠da: {}", 
                result.isCanReprocess() ? "APROVADO" : "REJEITADO");
            
        } catch (Exception e) {
            log.error("‚ùå Erro durante valida√ß√£o de reprocessamento: {}", e.getMessage(), e);
            result.setCanReprocess(false);
            result.setRejectionReason("Erro interno na valida√ß√£o: " + e.getMessage());
        }
        
        return result;
    }

    /**
     * Valida se a invoice tem itens v√°lidos para reprocessamento
     * ‚úÖ CORRE√á√ÉO: Recebe lista de itens como par√¢metro
     */
    private void validateInvoiceItems(List<InvoiceItem> items, ReprocessingValidationResult result) {
        if (items == null || items.isEmpty()) {
            result.setCanReprocess(false);
            result.setRejectionReason("Invoice n√£o possui itens para reprocessar");
            return;
        }
        
        // Verificar se h√° pelo menos um item v√°lido
        long validItems = items.stream()
            .filter(this::isValidItemForReprocessing)
            .count();
        
        if (validItems == 0) {
            result.setCanReprocess(false);
            result.setRejectionReason("Invoice n√£o possui itens v√°lidos para reprocessamento");
        }
        
        log.debug("üìä Invoice possui {} itens v√°lidos de {} total", validItems, items.size());
    }

    /**
     * Verifica se um item √© v√°lido para reprocessamento
     */
    private boolean isValidItemForReprocessing(InvoiceItem item) {
        if (item == null) return false;
        
        // Validar campos obrigat√≥rios
        if (item.getAssetCode() == null || item.getAssetCode().trim().isEmpty()) {
            return false;
        }
        
        if (item.getOperationType() == null) {
            return false;
        }
        
        if (item.getQuantity() == null || item.getQuantity() <= 0) {
            return false;
        }
        
        if (item.getUnitPrice() == null || item.getUnitPrice().compareTo(java.math.BigDecimal.ZERO) <= 0) {
            return false;
        }
        
        return true;
    }

    /**
     * Valida se o usu√°rio tem permiss√£o para reprocessar
     */
    private void validateUserPermission(Invoice invoice, User user, ReprocessingValidationResult result) {
        if (user == null) {
            result.setCanReprocess(false);
            result.setRejectionReason("Usu√°rio n√£o informado");
            return;
        }
        
        // Verificar se o usu√°rio √© o propriet√°rio da invoice
        if (invoice.getUser() == null || !user.getId().equals(invoice.getUser().getId())) {
            result.setCanReprocess(false);
            result.setRejectionReason("Usu√°rio n√£o tem permiss√£o para reprocessar esta invoice");
        }
    }

    /**
     * Valida hist√≥rico de reprocessamento
     */
    private void validateReprocessingHistory(Invoice invoice, ReprocessingValidationResult result) {
        // TODO: Implementar valida√ß√£o de hist√≥rico quando o reposit√≥rio estiver dispon√≠vel
        // Por enquanto, assumimos que pode ser reprocessada
        log.debug("üìã Hist√≥rico de reprocessamento n√£o implementado ainda");
    }

    /**
     * Valida intervalo m√≠nimo entre reprocessamentos
     */
    private void validateReprocessingInterval(Invoice invoice, ReprocessingValidationResult result) {
        if (invoice.getUpdatedAt() == null) {
            return; // Primeira vez, pode reprocessar
        }
        
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime lastUpdate = invoice.getUpdatedAt();
        
        long hoursSinceLastUpdate = java.time.Duration.between(lastUpdate, now).toHours();
        
        if (hoursSinceLastUpdate < MIN_REPROCESSING_INTERVAL_HOURS) {
            result.setCanReprocess(false);
            result.setRejectionReason(String.format(
                "Intervalo m√≠nimo de %d horas n√£o respeitado (√∫ltima atualiza√ß√£o: %s)", 
                MIN_REPROCESSING_INTERVAL_HOURS, lastUpdate));
        }
    }

    /**
     * Valida m√∫ltiplas invoices para reprocessamento
     */
    public List<ReprocessingValidationResult> validateBatchReprocessing(List<Invoice> invoices, User user) {
        log.info("üîç Validando reprocessamento de {} invoices", invoices.size());
        
        List<ReprocessingValidationResult> results = new ArrayList<>();
        
        for (Invoice invoice : invoices) {
            ReprocessingValidationResult result = validateReprocessing(invoice, user);
            results.add(result);
        }
        
        long approvedCount = results.stream()
            .filter(ReprocessingValidationResult::isCanReprocess)
            .count();
        
        log.info("‚úÖ Valida√ß√£o em lote conclu√≠da: {} aprovadas de {} total", approvedCount, invoices.size());
        
        return results;
    }

    /**
     * Verifica se uma invoice pode ser reprocessada
     */
    public boolean canReprocessInvoice(Invoice invoice, User user) {
        ReprocessingValidationResult result = validateReprocessing(invoice, user);
        return result.isCanReprocess();
    }

    /**
     * Resultado da valida√ß√£o de reprocessamento
     */
    @lombok.Builder
    @lombok.Data
    public static class ReprocessingValidationResult {
        private boolean canReprocess;
        private String rejectionReason;
        private List<String> warnings = new ArrayList<>();
        private UUID invoiceId;
        private String invoiceNumber;
        
        public void addWarning(String warning) {
            warnings.add(warning);
        }
        
        public boolean hasWarnings() {
            return !warnings.isEmpty();
        }
        
        public String getSummary() {
            if (canReprocess) {
                return String.format("Reprocessamento APROVADO para invoice %s", invoiceNumber);
            } else {
                return String.format("Reprocessamento REJEITADO para invoice %s: %s", 
                    invoiceNumber, rejectionReason);
            }
        }
    }
} 