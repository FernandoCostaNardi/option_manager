package com.olisystem.optionsmanager.service.invoice;

import com.olisystem.optionsmanager.dto.invoice.InvoiceData;
import com.olisystem.optionsmanager.dto.invoice.InvoiceFilterRequest;
import com.olisystem.optionsmanager.model.invoice.Invoice;
import com.olisystem.optionsmanager.model.auth.User;
import com.olisystem.optionsmanager.repository.InvoiceRepository;
import com.olisystem.optionsmanager.service.invoice.mapper.InvoiceMapperService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * Servi√ßo para consulta e listagem de notas de corretagem importadas
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional(readOnly = true)
public class InvoiceQueryService {

    private final InvoiceRepository invoiceRepository;
    private final InvoiceMapperService invoiceMapperService;

    /**
     * Lista notas com filtros e pagina√ß√£o
     * ‚úÖ ATUALIZADO: Suporte a filtro por status de processamento
     */
    public Page<InvoiceData> findInvoicesWithFilters(InvoiceFilterRequest filters, User user) {
        log.info("Consultando notas para usu√°rio {} com filtros: {}", user.getUsername(), filters);

        PageRequest pageRequest = PageRequest.of(
            filters.page(),
            filters.size(),
            Sort.by(Sort.Direction.fromString(filters.sortDirection()), filters.sortBy())
        );

        Page<Invoice> invoicesPage;

        // ‚úÖ NOVO: L√≥gica de filtro por status de processamento
        if (filters.hasProcessingStatusFilter()) {
            log.info("üîç Aplicando filtro por status de processamento: {}", filters.processingStatus());
            invoicesPage = findWithProcessingStatusFilter(filters, user, pageRequest);
        } else if (!filters.hasFilters()) {
            // Sem filtros - busca todas as notas do usu√°rio (n√£o processadas)
            log.info("üìã Buscando todas as notas n√£o processadas do usu√°rio");
            invoicesPage = invoiceRepository.findByUserAndNotSuccessfullyProcessed(user.getId(), pageRequest);
        } else {
            // Com filtros espec√≠ficos
            invoicesPage = findWithSpecificFilters(filters, user, pageRequest);
        }

        // Converte para DTOs
        List<InvoiceData> invoiceDataList = invoiceMapperService.toInvoiceDataList(invoicesPage.getContent());

        return new PageImpl<>(invoiceDataList, pageRequest, invoicesPage.getTotalElements());
    }

    /**
     * ‚úÖ NOVO: Buscar invoices com filtro por status de processamento
     */
    public Page<InvoiceData> findInvoicesWithProcessingStatusFilter(
            InvoiceFilterRequest filterRequest,
            User user) {
        
        log.info("üîç Buscando invoices com filtro de status: {}", filterRequest.processingStatus());
        
        Pageable pageable = PageRequest.of(
            filterRequest.page(),
            filterRequest.size(),
            Sort.by(Sort.Direction.fromString(filterRequest.sortDirection()), filterRequest.sortBy())
        );
        
        Page<Invoice> invoicesPage;
        
        // ‚úÖ NOVO: L√≥gica para filtro ALL
        if (filterRequest.processingStatus() == null || 
            filterRequest.processingStatus().equals("ALL")) {
            // Buscar todas as invoices sem filtro de status
            invoicesPage = invoiceRepository.findByUser(user.getId(), pageable);
            log.info("üìã Filtro ALL: Retornando todas as invoices ({} encontradas)", invoicesPage.getTotalElements());
        } else {
                            // Buscar com filtro de status espec√≠fico
                invoicesPage = invoiceRepository.findByUserAndProcessingStatus(
                    user.getId(),
                    filterRequest.processingStatus(),
                    pageable
                );
                            log.info("üìã Filtro {}: Retornando {} invoices",
                    filterRequest.processingStatus(), invoicesPage.getTotalElements());
        }
        
        List<InvoiceData> invoiceDataList = invoicesPage.getContent().stream()
            .map(invoiceMapperService::toInvoiceData)
            .toList();
        
        return new PageImpl<>(invoiceDataList, pageable, invoicesPage.getTotalElements());
    }

    /**
     * ‚úÖ NOVO: Aplica filtro por status de processamento
     */
    private Page<Invoice> findWithProcessingStatusFilter(InvoiceFilterRequest filters, User user, PageRequest pageRequest) {
        
        if (filters.processingStatus() == null) {
            // Se n√£o especificado, retorna notas n√£o processadas (comportamento padr√£o)
            return invoiceRepository.findByUserAndNotSuccessfullyProcessed(user.getId(), pageRequest);
        }
        
        switch (filters.processingStatus()) {
            case "PENDING":
                log.info("üìã Buscando notas pendentes");
                return invoiceRepository.findByUserAndPending(user.getId(), pageRequest);
                
            case "SUCCESS":
            case "PARTIAL_SUCCESS":
                log.info("‚úÖ Buscando notas processadas com sucesso");
                return invoiceRepository.findByUserAndProcessingStatus(user.getId(), filters.processingStatus(), pageRequest);
                
            case "ERROR":
                log.info("‚ùå Buscando notas com erro de processamento");
                return invoiceRepository.findByUserAndProcessingStatus(user.getId(), filters.processingStatus(), pageRequest);
                
            case "PROCESSING":
                log.info("üîÑ Buscando notas em processamento");
                return invoiceRepository.findByUserAndProcessingStatus(user.getId(), filters.processingStatus(), pageRequest);
                
            default:
                log.warn("‚ö†Ô∏è Status de processamento n√£o reconhecido: {}", filters.processingStatus());
                return invoiceRepository.findByUserAndNotSuccessfullyProcessed(user.getId(), pageRequest);
        }
    }

    /**
     * Busca nota espec√≠fica por ID
     */
    public Optional<InvoiceData> findInvoiceById(UUID invoiceId, User user) {
        log.debug("Buscando nota {} para usu√°rio {}", invoiceId, user.getUsername());

        return invoiceRepository.findById(invoiceId)
            .filter(invoice -> invoice.getUser().getId().equals(user.getId()))
            .map(invoiceMapperService::toInvoiceData);
    }

    /**
     * Busca notas por corretora
     */
    public Page<InvoiceData> findInvoicesByBrokerage(UUID brokerageId, User user, int page, int size) {
        log.debug("Buscando notas da corretora {} para usu√°rio {}", brokerageId, user.getUsername());

        PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "tradingDate"));
        
        Page<Invoice> invoicesPage = invoiceRepository.findByBrokerageAndUser(brokerageId, user.getId(), pageRequest);
        
        List<InvoiceData> invoiceDataList = invoiceMapperService.toInvoiceDataList(invoicesPage.getContent());

        return new PageImpl<>(invoiceDataList, pageRequest, invoicesPage.getTotalElements());
    }

    /**
     * Busca notas por per√≠odo de negocia√ß√£o
     */
    public Page<InvoiceData> findInvoicesByDateRange(LocalDate startDate, LocalDate endDate, 
                                                    User user, int page, int size) {
        log.debug("Buscando notas entre {} e {} para usu√°rio {}", startDate, endDate, user.getUsername());

        PageRequest pageRequest = PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "tradingDate"));
        
        Page<Invoice> invoicesPage = invoiceRepository.findByUserAndDateRange(
            user.getId(), startDate, endDate, pageRequest);
        
        List<InvoiceData> invoiceDataList = invoiceMapperService.toInvoiceDataList(invoicesPage.getContent());

        return new PageImpl<>(invoiceDataList, pageRequest, invoicesPage.getTotalElements());
    }

    /**
     * Busca √∫ltimas notas importadas
     */
    public List<InvoiceData> findLatestImportedInvoices(User user, int limit) {
        log.debug("Buscando √∫ltimas {} notas importadas para usu√°rio {}", limit, user.getUsername());

        PageRequest pageRequest = PageRequest.of(0, limit);
        List<Invoice> invoices = invoiceRepository.findLatestImportedByUser(user.getId(), pageRequest);
        
        return invoiceMapperService.toInvoiceDataList(invoices);
    }

    /**
     * Busca notas importadas em uma data espec√≠fica
     */
    public List<InvoiceData> findInvoicesImportedOn(LocalDate importDate, User user) {
        log.debug("Buscando notas importadas em {} para usu√°rio {}", importDate, user.getUsername());

        List<Invoice> invoices = invoiceRepository.findByUserAndImportDate(user.getId(), importDate);
        
        return invoiceMapperService.toInvoiceDataList(invoices);
    }

    /**
     * Conta total de notas do usu√°rio
     * ‚úÖ ATUALIZADO: Conta apenas notas n√£o processadas por padr√£o
     */
    public Long countInvoicesByUser(User user) {
        return invoiceRepository.countByUserAndNotProcessed(user.getId());
    }

    /**
     * ‚úÖ NOVO: Conta notas pendentes do usu√°rio
     */
    public Long countPendingInvoicesByUser(User user) {
        return invoiceRepository.countByUserAndPending(user.getId());
    }

    /**
     * Conta notas por corretora
     */
    public Long countInvoicesByBrokerage(UUID brokerageId, User user) {
        return invoiceRepository.countByBrokerageAndUser(brokerageId, user.getId());
    }

    /**
     * Aplica filtros espec√≠ficos na consulta
     * ‚úÖ ATUALIZADO: Mant√©m comportamento original para filtros espec√≠ficos
     */
    private Page<Invoice> findWithSpecificFilters(InvoiceFilterRequest filters, User user, PageRequest pageRequest) {
        
        // Se tem filtro de corretora
        if (filters.brokerageId() != null) {
            return invoiceRepository.findByBrokerageAndUser(filters.brokerageId(), user.getId(), pageRequest);
        }
        
        // Se tem filtro de per√≠odo
        if (filters.hasDateRange()) {
            LocalDate startDate = filters.startDate() != null ? filters.startDate() : LocalDate.of(1990, 1, 1);
            LocalDate endDate = filters.endDate() != null ? filters.endDate() : LocalDate.now();
            
            return invoiceRepository.findByUserAndDateRange(user.getId(), startDate, endDate, pageRequest);
        }
        
        // Sem filtros espec√≠ficos implementados ainda - retorna todas (n√£o processadas)
        return invoiceRepository.findByUserAndNotSuccessfullyProcessed(user.getId(), pageRequest);
    }
}
