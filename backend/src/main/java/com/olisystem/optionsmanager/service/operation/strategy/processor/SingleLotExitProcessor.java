package com.olisystem.optionsmanager.service.operation.strategy.processor;

import com.olisystem.optionsmanager.dto.operation.OperationFinalizationRequest;
import com.olisystem.optionsmanager.exception.BusinessException;
import com.olisystem.optionsmanager.model.operation.Operation;
import com.olisystem.optionsmanager.model.operation.OperationRoleType;
import com.olisystem.optionsmanager.model.operation.OperationStatus;
import com.olisystem.optionsmanager.model.operation.TradeType;
import com.olisystem.optionsmanager.model.position.EntryLot;
import com.olisystem.optionsmanager.model.position.PositionOperationType;
import com.olisystem.optionsmanager.model.transaction.TransactionType;
import com.olisystem.optionsmanager.record.operation.OperationExitPositionContext;
import com.olisystem.optionsmanager.resolver.tradeType.TradeTypeResolver;
import com.olisystem.optionsmanager.service.operation.averageOperation.AverageOperationGroupService;
import com.olisystem.optionsmanager.service.operation.consolidate.ConsolidatedOperationService;
import com.olisystem.optionsmanager.service.operation.creation.OperationCreationService;
import com.olisystem.optionsmanager.service.operation.exitRecord.ExitRecordService;
import com.olisystem.optionsmanager.service.operation.profit.ProfitCalculationService;
import com.olisystem.optionsmanager.service.operation.status.OperationStatusService;
import com.olisystem.optionsmanager.service.position.entrylots.EntryLotUpdateService;
import com.olisystem.optionsmanager.service.position.positionOperation.PositionOperationService;
import com.olisystem.optionsmanager.service.position.update.PositionUpdateService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

@Service
@RequiredArgsConstructor
@Slf4j
public class SingleLotExitProcessor {

    private final TradeTypeResolver tradeTypeResolver;
    private final ProfitCalculationService profitCalculationService;
    private final EntryLotUpdateService entryLotUpdateService;
    private final PositionUpdateService positionUpdateService;
    private final OperationStatusService operationStatusService;
    private final ExitRecordService exitRecordService;
    private final PositionOperationService positionOperationService;
    private final AverageOperationGroupService averageOperationGroupService;
    private final OperationCreationService operationCreationService;
    private final ConsolidatedOperationService consolidatedOperationService;

    /**
     * Processa a sa√≠da de opera√ß√£o com lote √∫nico
     * MELHORADO: Agora com valida√ß√µes e logs detalhados
     */
    @Transactional
    public Operation process(OperationExitPositionContext context) {
        log.info("=== INICIANDO PROCESSAMENTO DE SA√çDA COM LOTE √öNICO ===");
        log.info("Opera√ß√£o ID: {}, Posi√ß√£o ID: {}",
                context.context().activeOperation().getId(),
                context.position().getId());

        try {
            // 1. VALIDA√á√ïES INICIAIS
            validateProcessingContext(context);

            // 2. OBTER DADOS B√ÅSICOS
            EntryLot lot = context.availableLots().get(0);
            OperationFinalizationRequest request = context.context().request();
            Operation activeOperation = context.context().activeOperation();

            log.info("Lote √∫nico encontrado: ID={}, quantidade_restante={}, pre√ßo_entrada={}",
                    lot.getId(), lot.getRemainingQuantity(), lot.getUnitPrice());

            // 3. VALIDAR QUANTIDADE SOLICITADA
            validateRequestedQuantity(lot, request);

            // 4. DETERMINAR TIPO DE OPERA√á√ÉO (DAY/SWING)
            TradeType tradeType = tradeTypeResolver.determineTradeType(
                    lot.getEntryDate(), request.getExitDate());

            log.info("Tipo de opera√ß√£o determinado: {} (entrada: {}, sa√≠da: {})",
                    tradeType, lot.getEntryDate(), request.getExitDate());

            // 5. CALCULAR RESULTADOS FINANCEIROS
            // ‚úÖ CORRE√á√ÉO: Determinar pre√ßo de entrada correto baseado no status da Position
            BigDecimal entryPriceToUse;
            BigDecimal entryTotalValueToUse;
            
            boolean isSubsequentOperation = context.position().getStatus() == 
                    com.olisystem.optionsmanager.model.position.PositionStatus.PARTIAL;
            
            if (isSubsequentOperation) {
                // Para opera√ß√µes ap√≥s a primeira parcial, usar pre√ßo break-even da Position
                entryPriceToUse = context.position().getAveragePrice();
                entryTotalValueToUse = entryPriceToUse.multiply(BigDecimal.valueOf(request.getQuantity()));
                log.info("Opera√ß√£o subsequente detectada - usando pre√ßo break-even: {}", entryPriceToUse);
            } else {
                // Para primeira opera√ß√£o, usar pre√ßo original
                entryPriceToUse = activeOperation.getEntryUnitPrice();
                entryTotalValueToUse = activeOperation.getEntryTotalValue();
                log.info("Primeira opera√ß√£o detectada - usando pre√ßo original: {}", entryPriceToUse);
            }
            
            // CORRE√á√ÉO: Usar pre√ßos corretos para valida√ß√£o e c√°lculo
            profitCalculationService.validateCalculationInputs(
                    entryPriceToUse,
                    request.getExitUnitPrice(),
                    request.getQuantity()
            );

            BigDecimal profitLoss = profitCalculationService.calculateProfitLoss(
                    entryPriceToUse,
                    request.getExitUnitPrice(),
                    request.getQuantity());

            BigDecimal profitLossPercentage = profitCalculationService.calculateProfitLossPercentage(
                    profitLoss, entryTotalValueToUse);

            log.info("Resultados financeiros calculados: lucro/preju√≠zo={}, percentual={}%, pre√ßo_entrada_usado={}",
                    profitLoss, profitLossPercentage, entryPriceToUse);

            // 6. ATUALIZAR POSI√á√ÉO (n√£o afeta o lote)
            log.debug("Atualizando posi√ß√£o...");
            boolean isTotalExit = request.getQuantity().equals(context.position().getRemainingQuantity());
            
            if (isTotalExit) {
                log.debug("Sa√≠da TOTAL detectada - usando updatePosition()");
                positionUpdateService.updatePosition(context.position(), request, profitLoss, profitLossPercentage);
            } else {
                log.debug("Sa√≠da PARCIAL detectada - usando updatePositionPartial()");
                positionUpdateService.updatePositionPartial(context.position(), request, profitLoss, profitLossPercentage, request.getQuantity());
            }

            // 7. ATUALIZAR STATUS DA OPERA√á√ÉO DE ENTRADA
            log.debug("Atualizando status da opera√ß√£o de entrada para HIDDEN...");
            operationStatusService.updateOperationStatus(activeOperation, OperationStatus.HIDDEN);

            // 8. CRIAR OPERA√á√ÉO DE SA√çDA
            log.debug("Criando opera√ß√£o de sa√≠da...");
            Operation exitOperation = operationCreationService.createExitOperation(
                    context, tradeType, profitLoss, context.transactionType(), request.getQuantity());

            log.info("Opera√ß√£o de sa√≠da criada: ID={}, status={}, P&L={}", 
                    exitOperation.getId(), exitOperation.getStatus(), profitLoss);

            // 9. ‚úÖ CRIAR EXIT RECORD IMEDIATAMENTE (preservar estado do lote)
            log.debug("Criando ExitRecord ANTES de atualizar lote...");
            exitRecordService.createExitRecord(lot, exitOperation, context.context(), request.getQuantity());
            log.info("‚úÖ ExitRecord criado com sucesso com lote intacto");

            // 10. CRIAR POSITION OPERATION (tamb√©m antes de atualizar lote)
            log.debug("Criando PositionOperation...");
            positionOperationService.createPositionOperation(
                    context.position(), exitOperation, request, PositionOperationType.FULL_EXIT);

            // 11. ‚úÖ ATUALIZAR LOTE DE ENTRADA (POR √öLTIMO!)
            log.debug("Atualizando lote de entrada...");
            entryLotUpdateService.updateEntryLot(lot, request.getQuantity());

            // 12. ATUALIZAR AVERAGE OPERATION GROUP (final)
            log.debug("Atualizando AverageOperationGroup...");
            averageOperationGroupService.updateOperationGroup(
                    context.group(), context.position(), exitOperation, profitLoss);

            // 13. ‚úÖ CONSOLIDA√á√ÉO FINAL (se posi√ß√£o foi totalmente fechada)
            Operation finalOperation = exitOperation;
            if (isTotalExit) {
                log.info("üîÑ Posi√ß√£o totalmente fechada - iniciando consolida√ß√£o final...");
                finalOperation = createFinalConsolidatedOperation(context, exitOperation, profitLoss, profitLossPercentage);
                log.info("‚úÖ Opera√ß√£o consolidada final criada: ID={}, P&L={}", 
                    finalOperation.getId(), finalOperation.getProfitLoss());
            }

            log.info("=== PROCESSAMENTO DE SA√çDA COM LOTE √öNICO CONCLU√çDO COM SUCESSO ===");
            log.info("Opera√ß√£o final ID: {}, Status: {}, P&L total: {}",
                    finalOperation.getId(), finalOperation.getStatus(), finalOperation.getProfitLoss());

            return finalOperation;

        } catch (Exception e) {
            log.error("Erro durante processamento de sa√≠da com lote √∫nico para opera√ß√£o {}: {}",
                    context.context().activeOperation().getId(), e.getMessage(), e);
            throw new BusinessException("Falha no processamento da sa√≠da: " + e.getMessage());
        }
    }

    /**
     * NOVO M√âTODO: Valida√ß√µes do contexto de processamento
     */
    private void validateProcessingContext(OperationExitPositionContext context) {
        if (context == null) {
            throw new IllegalArgumentException("Contexto de processamento n√£o pode ser nulo");
        }

        if (context.availableLots() == null || context.availableLots().isEmpty()) {
            throw new BusinessException("Nenhum lote dispon√≠vel para processamento");
        }

        if (context.availableLots().size() != 1) {
            throw new BusinessException(
                    String.format("Processador de lote √∫nico recebeu %d lotes. Esperado: 1",
                            context.availableLots().size())
            );
        }

        if (context.context() == null || context.context().request() == null) {
            throw new IllegalArgumentException("Request de finaliza√ß√£o n√£o pode ser nulo");
        }

        if (context.position() == null) {
            throw new IllegalArgumentException("Posi√ß√£o n√£o pode ser nula");
        }

        log.debug("Valida√ß√µes do contexto de processamento aprovadas");
    }

    /**
     * NOVO M√âTODO: Validar quantidade solicitada vs dispon√≠vel
     */
    private void validateRequestedQuantity(EntryLot lot, OperationFinalizationRequest request) {
        Integer requestedQuantity = request.getQuantity();
        Integer availableQuantity = lot.getRemainingQuantity();

        if (requestedQuantity == null || requestedQuantity <= 0) {
            throw new IllegalArgumentException("Quantidade solicitada deve ser maior que zero");
        }

        if (requestedQuantity > availableQuantity) {
            throw new BusinessException(
                    String.format("Quantidade solicitada (%d) excede quantidade dispon√≠vel no lote (%d). Lote ID: %s",
                            requestedQuantity, availableQuantity, lot.getId())
            );
        }

        // Para lote √∫nico, geralmente esperamos sa√≠da total
        if (!requestedQuantity.equals(availableQuantity)) {
            log.warn("ATEN√á√ÉO: Quantidade solicitada ({}) √© diferente da quantidade total do lote ({}). " +
                    "Isso pode indicar uma sa√≠da parcial inesperada.", requestedQuantity, availableQuantity);
        }

        log.debug("Valida√ß√£o de quantidade aprovada: solicitada={}, dispon√≠vel={}",
                requestedQuantity, availableQuantity);
    }

    /**
     * NOVO M√âTODO: Verificar se √© uma sa√≠da total
     */
    private boolean isTotalExit(EntryLot lot, Integer requestedQuantity) {
        return lot.getRemainingQuantity().equals(requestedQuantity);
    }

    /**
     * NOVO M√âTODO: Log de resumo da opera√ß√£o
     */
    private void logOperationSummary(Operation exitOperation, TradeType tradeType,
                                     BigDecimal profitLoss, BigDecimal profitLossPercentage) {
        String resultType = profitLoss.compareTo(BigDecimal.ZERO) >= 0 ? "LUCRO" : "PREJU√çZO";

        log.info("=== RESUMO DA OPERA√á√ÉO ===");
        log.info("Tipo: {} {}", tradeType, resultType);
        log.info("Valor: {} ({}%)", profitLoss, profitLossPercentage);
        log.info("Status final: {}", exitOperation.getStatus());
        log.info("========================");
    }

    /**
     * ‚úÖ NOVO M√âTODO: Criar opera√ß√£o consolidada final ap√≥s fechamento total da posi√ß√£o
     */
    private Operation createFinalConsolidatedOperation(OperationExitPositionContext context, 
                                                      Operation lastExitOperation, 
                                                      BigDecimal finalProfitLoss, 
                                                      BigDecimal finalProfitLossPercentage) {
        log.info("üîÑ Criando opera√ß√£o consolidada final...");
        
        try {
            // ‚úÖ CORRE√á√ÉO: Calcular resultado absoluto correto (Total Investido vs Total Recebido)
            BigDecimal absoluteFinalProfitLoss = calculateAbsoluteFinalResult(context);
            BigDecimal absoluteFinalPercentage = calculateAbsoluteFinalPercentage(context, absoluteFinalProfitLoss);
            
            log.info("üìä Resultado absoluto calculado: P&L={}, Percentual={}%", 
                absoluteFinalProfitLoss, absoluteFinalPercentage);
            
            // Atualizar a opera√ß√£o com os valores absolutos corretos
            lastExitOperation.setProfitLoss(absoluteFinalProfitLoss);
            lastExitOperation.setProfitLossPercentage(absoluteFinalPercentage);
            
            // 1. Usar o servi√ßo de consolida√ß√£o para transformar em TOTAL_EXIT
            Operation consolidatedFinal = consolidatedOperationService.transformToTotalExit(
                lastExitOperation, context.group());
            
            // 2. Marcar todas as opera√ß√µes como HIDDEN (exceto a consolidada)
            markAllOperationsAsHidden(context);
            
            // 3. A opera√ß√£o consolidada deve ficar ATIVA para representar o resultado final
            OperationStatus finalStatus;
            if (absoluteFinalProfitLoss.compareTo(BigDecimal.ZERO) > 0) {
                finalStatus = OperationStatus.WINNER;
            } else if (absoluteFinalProfitLoss.compareTo(BigDecimal.ZERO) < 0) {
                finalStatus = OperationStatus.LOSER;
            } else {
                finalStatus = OperationStatus.NEUTRAl; // Break-even 
            }
            
            consolidatedFinal.setStatus(finalStatus);
            
            // ‚úÖ CORRE√á√ÉO: Garantir que os valores absolutos est√£o na opera√ß√£o final
            consolidatedFinal.setProfitLoss(absoluteFinalProfitLoss);
            consolidatedFinal.setProfitLossPercentage(absoluteFinalPercentage);
            
            // ‚úÖ IMPORTANTE: Salvar a opera√ß√£o com os valores corrigidos
            // (O transformToTotalExit j√° salva, mas vamos garantir que os valores est√£o corretos)
            
            log.info("‚úÖ Consolida√ß√£o final conclu√≠da: status={}, P&L absoluto={}, Percentual={}%", 
                finalStatus, absoluteFinalProfitLoss, absoluteFinalPercentage);
            
            return consolidatedFinal;
            
        } catch (Exception e) {
            log.error("‚ùå Erro na consolida√ß√£o final: {}", e.getMessage(), e);
            // Em caso de erro, retornar a opera√ß√£o original
            return lastExitOperation;
        }
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Calcular resultado absoluto final (VERS√ÉO SIMPLIFICADA)
     */
    private BigDecimal calculateAbsoluteFinalResult(OperationExitPositionContext context) {
        log.debug("Calculando resultado absoluto final (vers√£o simplificada)...");
        
        // ‚úÖ ESTRAT√âGIA SIMPLES: Usar s√≥ a opera√ß√£o ORIGINAL para investimento
        BigDecimal totalInvested = BigDecimal.ZERO;
        Operation originalOperation = findOriginalOperation(context);
        
        if (originalOperation != null && originalOperation.getEntryTotalValue() != null) {
            totalInvested = originalOperation.getEntryTotalValue();
            log.info("üí∞ === INVESTIMENTO ORIGINAL: {} (da opera√ß√£o {}) ===", 
                totalInvested, originalOperation.getId());
        } else {
            log.error("‚ùå N√£o foi poss√≠vel encontrar opera√ß√£o ORIGINAL!");
            return BigDecimal.ZERO;
        }
        
        // ‚úÖ ESTRAT√âGIA SIMPLES: Calcular total recebido diretamente
        BigDecimal totalReceived = calculateTotalReceivedSimple(context);
        
        // Resultado absoluto = Total Recebido - Total Investido
        BigDecimal absoluteResult = totalReceived.subtract(totalInvested);
        
        log.info("üìä === C√ÅLCULO FINAL SIMPLIFICADO ===");
        log.info("üìä Investido: {}", totalInvested);
        log.info("üìä Recebido: {}", totalReceived);
        log.info("üìä Resultado: {}", absoluteResult);
        log.info("üìä ================================");
            
        return absoluteResult;
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Encontrar opera√ß√£o ORIGINAL
     */
    private Operation findOriginalOperation(OperationExitPositionContext context) {
        for (var item : context.group().getItems()) {
            if (item.getRoleType() == OperationRoleType.ORIGINAL) {
                Operation op = item.getOperation();
                if (op != null && op.getTransactionType() == TransactionType.BUY) {
                    log.debug("üîç Opera√ß√£o ORIGINAL encontrada: ID={}, valor={}", 
                        op.getId(), op.getEntryTotalValue());
                    return op;
                }
            }
        }
        
        // Fallback: usar opera√ß√£o ativa
        Operation activeOp = context.context().activeOperation();
        if (activeOp != null && activeOp.getEntryTotalValue() != null) {
            log.warn("‚ö†Ô∏è Usando opera√ß√£o ativa como fallback: ID={}, valor={}", 
                activeOp.getId(), activeOp.getEntryTotalValue());
            return activeOp;
        }
        
        return null;
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Calcular total recebido de forma simples
     */
    private BigDecimal calculateTotalReceivedSimple(OperationExitPositionContext context) {
        log.info("üí∏ === C√ÅLCULO SIMPLIFICADO DO TOTAL RECEBIDO ===");
        
        BigDecimal totalReceived = BigDecimal.ZERO;
        
        // 1. Somar lucro j√° realizado da Position (que vem das sa√≠das anteriores)
        if (context.position().getTotalRealizedProfit() != null) {
            // Total realizado = Valor investido original + lucro realizado
            BigDecimal totalOriginalInvested = findOriginalOperation(context).getEntryTotalValue();
            BigDecimal totalFromPreviousExits = totalOriginalInvested.add(context.position().getTotalRealizedProfit());
            
            // Mas precisamos calcular s√≥ o que foi RECEBIDO das sa√≠das anteriores
            // Se position tem profit realizado, significa que j√° houve sa√≠das
            // Vou usar uma abordagem mais direta: buscar exitTotalValue das opera√ß√µes j√° finalizadas
            
            for (var item : context.group().getItems()) {
                Operation op = item.getOperation();
                if (op != null && op.getTransactionType() == TransactionType.SELL && 
                    op.getExitTotalValue() != null && op.getStatus() != OperationStatus.HIDDEN) {
                    
                    totalReceived = totalReceived.add(op.getExitTotalValue());
                    log.info("üí∏ Sa√≠da anterior: ID={}, valor={}, acumulado={}", 
                        op.getId(), op.getExitTotalValue(), totalReceived);
                }
            }
        }
        
        // 2. Adicionar valor da sa√≠da atual
        BigDecimal currentExitValue = context.context().request().getExitUnitPrice()
            .multiply(BigDecimal.valueOf(context.context().request().getQuantity()));
        
        totalReceived = totalReceived.add(currentExitValue);
        log.info("üí∏ Sa√≠da ATUAL: valor={}", currentExitValue);
        log.info("üí∏ === TOTAL RECEBIDO: {} ===", totalReceived);
        
        return totalReceived;
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Calcular investimento original total correto
     */
    private BigDecimal calculateOriginalTotalInvestment(OperationExitPositionContext context) {
        log.debug("Calculando investimento original total...");
        
        BigDecimal totalInvestment = BigDecimal.ZERO;
        
        log.info("üîç === AN√ÅLISE COMPLETA DAS OPERA√á√ïES DE ENTRADA ===");
        log.info("üîç Total de itens no grupo: {}", context.group().getItems().size());
        
        // Somar todas opera√ß√µes de ENTRADA (BUY) do grupo para obter investimento real
        for (var item : context.group().getItems()) {
            Operation op = item.getOperation();
            
            log.info("üîç Item do grupo: roleType={}, opera√ß√£o_id={}", 
                item.getRoleType(), op != null ? op.getId() : "NULL");
            
            if (op != null) {
                log.info("üîç   - TransactionType: {}", op.getTransactionType());
                log.info("üîç   - EntryTotalValue: {}", op.getEntryTotalValue());
                log.info("üîç   - ExitTotalValue: {}", op.getExitTotalValue());
                log.info("üîç   - Status: {}", op.getStatus());
                log.info("üîç   - Quantidade: {}", op.getQuantity());
                log.info("üîç   - Pre√ßo entrada: {}", op.getEntryUnitPrice());
            }
            
            if (op != null && op.getTransactionType() == TransactionType.BUY && 
                op.getEntryTotalValue() != null) {
                
                // ‚úÖ CORRE√á√ÉO CR√çTICA: S√≥ contar opera√ß√µes ORIGINAIS, n√£o consolidadas artificiais
                if (item.getRoleType() == OperationRoleType.ORIGINAL && 
                    (op.getStatus() == OperationStatus.ACTIVE || op.getStatus() == OperationStatus.HIDDEN)) {
                    
                    totalInvestment = totalInvestment.add(op.getEntryTotalValue());
                    log.info("üí∞ ‚úÖ CONTABILIZADA - Opera√ß√£o ORIGINAL: ID={}, valor={}, total_acumulado={}", 
                        op.getId(), op.getEntryTotalValue(), totalInvestment);
                        
                } else {
                    log.info("üí∞ ‚ùå IGNORADA - Opera√ß√£o artificial: ID={}, roleType={}, status={}, valor={}", 
                        op.getId(), item.getRoleType(), op.getStatus(), op.getEntryTotalValue());
                }
            }
        }
        
        log.info("üîç === FIM DA AN√ÅLISE DAS OPERA√á√ïES DE ENTRADA ===");
        
        // Se n√£o encontrou opera√ß√µes de entrada no grupo, usar c√°lculo alternativo
        if (totalInvestment.compareTo(BigDecimal.ZERO) == 0) {
            log.warn("‚ö†Ô∏è Nenhuma opera√ß√£o de entrada v√°lida encontrada no grupo. Usando c√°lculo alternativo...");
            
            // Buscar opera√ß√£o original atrav√©s da position
            Operation originalOperation = context.context().activeOperation();
            if (originalOperation != null && originalOperation.getEntryTotalValue() != null) {
                totalInvestment = originalOperation.getEntryTotalValue();
                log.info("üí∞ Usando opera√ß√£o original: valor={}", totalInvestment);
            } else {
                // √öltimo recurso: calcular baseado na quantity total da position e pre√ßo original
                log.warn("‚ö†Ô∏è Usando √∫ltimo recurso para calcular investimento...");
                // Buscar a primeira opera√ß√£o de entrada para obter pre√ßo original
                BigDecimal originalPrice = findOriginalEntryPrice(context);
                totalInvestment = originalPrice.multiply(BigDecimal.valueOf(context.position().getTotalQuantity()));
                log.info("üí∞ C√°lculo √∫ltimo recurso: pre√ßo_original={}, quantidade={}, total={}", 
                    originalPrice, context.position().getTotalQuantity(), totalInvestment);
            }
        }
        
        log.info("üí∞ === INVESTIMENTO ORIGINAL TOTAL CALCULADO: {} ===", totalInvestment);
        return totalInvestment;
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Encontrar pre√ßo original de entrada 
     */
    private BigDecimal findOriginalEntryPrice(OperationExitPositionContext context) {
        // Buscar primeira opera√ß√£o ORIGINAL do grupo
        for (var item : context.group().getItems()) {
            if (item.getRoleType() == OperationRoleType.ORIGINAL) {
                
                Operation originalOp = item.getOperation();
                if (originalOp != null && originalOp.getEntryUnitPrice() != null) {
                    log.debug("üîç Pre√ßo original encontrado: {}", originalOp.getEntryUnitPrice());
                    return originalOp.getEntryUnitPrice();
                }
            }
        }
        
        // Se n√£o encontrou, usar opera√ß√£o ativa
        Operation activeOp = context.context().activeOperation();
        if (activeOp != null && activeOp.getEntryUnitPrice() != null) {
            log.debug("üîç Usando pre√ßo da opera√ß√£o ativa: {}", activeOp.getEntryUnitPrice());
            return activeOp.getEntryUnitPrice();
        }
        
        log.warn("‚ö†Ô∏è N√£o foi poss√≠vel encontrar pre√ßo original! Usando BigDecimal.ZERO");
        return BigDecimal.ZERO;
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Calcular percentual absoluto final (VERS√ÉO SIMPLIFICADA)
     */
    private BigDecimal calculateAbsoluteFinalPercentage(OperationExitPositionContext context, BigDecimal absoluteResult) {
        // ‚úÖ CORRE√á√ÉO: Usar opera√ß√£o original para investimento
        Operation originalOperation = findOriginalOperation(context);
        
        if (originalOperation == null || originalOperation.getEntryTotalValue() == null) {
            log.warn("‚ö†Ô∏è N√£o foi poss√≠vel encontrar opera√ß√£o original - retornando percentual zero");
            return BigDecimal.ZERO;
        }
        
        BigDecimal totalInvested = originalOperation.getEntryTotalValue();
        
        if (totalInvested.compareTo(BigDecimal.ZERO) == 0) {
            log.warn("‚ö†Ô∏è Total investido √© zero - retornando percentual zero");
            return BigDecimal.ZERO;
        }
        
        BigDecimal percentage = absoluteResult.divide(totalInvested, 4, java.math.RoundingMode.HALF_UP)
            .multiply(BigDecimal.valueOf(100));
            
        log.info("üìä Percentual calculado: {}% (resultado={}, investido={})", 
            percentage, absoluteResult, totalInvested);
            
        return percentage;
    }
    
    /**
     * ‚úÖ NOVO M√âTODO: Marcar todas opera√ß√µes do grupo como HIDDEN
     */
    private void markAllOperationsAsHidden(OperationExitPositionContext context) {
        log.debug("Marcando todas opera√ß√µes intermedi√°rias como HIDDEN...");
        
        try {
            // Buscar todas opera√ß√µes do grupo atrav√©s dos itens
            context.group().getItems().forEach(item -> {
                try {
                    Operation op = item.getOperation();
                    if (op != null && op.getStatus() != OperationStatus.HIDDEN) {
                        operationStatusService.updateOperationStatus(op, OperationStatus.HIDDEN);
                        log.debug("Opera√ß√£o {} marcada como HIDDEN", op.getId());
                    }
                } catch (Exception e) {
                    log.warn("Erro ao marcar opera√ß√£o como HIDDEN: {}", e.getMessage());
                }
            });
            
            log.info("‚úÖ Todas opera√ß√µes intermedi√°rias marcadas como HIDDEN");
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao marcar opera√ß√µes como HIDDEN: {}", e.getMessage(), e);
        }
    }
}
