/**
 * Fun√ß√£o para limpar caracteres especiais que podem vir codificados do backend
 */
export function cleanSpecialCharacters(text: string): string {
  if (!text) return text;
  
  console.log('üßπ Limpando texto:', text);
  
  // Primeiro, tentar decodificar caracteres Unicode escapados
  let cleaned = text;
  
  // Decodificar caracteres Unicode escapados (formato \u00e3)
  cleaned = cleaned.replace(/\\u([0-9a-fA-F]{4})/g, (match, hex) => {
    const char = String.fromCharCode(parseInt(hex, 16));
    console.log(`üîÑ Decodificando ${match} -> ${char}`);
    return char;
  });
  
  // Se o texto ainda cont√©m caracteres Unicode n√£o escapados, tentar decodificar
  try {
    // Tentar decodificar como JSON string
    if (cleaned.includes('\\u')) {
      cleaned = JSON.parse('"' + cleaned + '"');
      console.log('üîÑ Decodificado via JSON.parse:', cleaned);
    }
  } catch (e) {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel decodificar via JSON.parse');
  }
  
  // Substitui√ß√µes espec√≠ficas para caracteres problem√°ticos
  cleaned = cleaned
    .replace(/\\u00ed/g, '√≠') // √≠
    .replace(/\\u00e7/g, '√ß') // √ß
    .replace(/\\u00f5/g, '√µ') // √µ
    .replace(/\\u00e3/g, '√£') // √£
    .replace(/\\u00e1/g, '√°') // √°
    .replace(/\\u00e9/g, '√©') // √©
    .replace(/\\u00f3/g, '√≥') // √≥
    .replace(/\\u00fa/g, '√∫') // √∫
    .replace(/\\u00e0/g, '√†') // √†
    .replace(/\\u00e8/g, '√®') // √®
    .replace(/\\u00ec/g, '√¨') // √¨
    .replace(/\\u00f2/g, '√≤') // √≤
    .replace(/\\u00f9/g, '√π') // √π
    .replace(/\\u00c7/g, '√á') // √á
    .replace(/\\u00d5/g, '√ï') // √ï
    .replace(/\\u00c3/g, '√É') // √É
    .replace(/\\u00c1/g, '√Å') // √Å
    .replace(/\\u00c9/g, '√â') // √â
    .replace(/\\u00d3/g, '√ì') // √ì
    .replace(/\\u00da/g, '√ö') // √ö
    .replace(/\\u00c0/g, '√Ä') // √Ä
    .replace(/\\u00c8/g, '√à') // √à
    .replace(/\\u00cc/g, '√å') // √å
    .replace(/\\u00d2/g, '√í') // √í
    .replace(/\\u00d9/g, '√ô') // √ô
    .replace(/\\u00e2/g, '√¢') // √¢
    .replace(/\\u00ea/g, '√™') // √™
    .replace(/\\u00ee/g, '√Æ') // √Æ
    .replace(/\\u00f4/g, '√¥') // √¥
    .replace(/\\u00fb/g, '√ª') // √ª
    .replace(/\\u00c2/g, '√Ç') // √Ç
    .replace(/\\u00ca/g, '√ä') // √ä
    .replace(/\\u00ce/g, '√é') // √é
    .replace(/\\u00d4/g, '√î') // √î
    .replace(/\\u00db/g, '√õ'); // √õ
  
  // Remover o s√≠mbolo ? no in√≠cio das mensagens (se vier do backend)
  cleaned = cleaned.replace(/^\?+\s*/, '');
  
  // Substitui√ß√µes espec√≠ficas para problemas conhecidos
  cleaned = cleaned
    .replace(/conclu do/g, 'conclu√≠do')
    .replace(/opera es/g, 'opera√ß√µes')
    .replace(/processamento/g, 'processamento')
    .replace(/criadas/g, 'criadas');
  
  console.log('üßπ Texto limpo:', cleaned);
  
  return cleaned;
}

/**
 * Fun√ß√£o espec√≠fica para decodificar UTF-8 corretamente
 */
export function decodeUTF8(text: string): string {
  if (!text) return text;
  
  console.log('üî§ Decodificando UTF-8:', text);
  
  try {
    // Tentar decodificar usando decodeURIComponent
    const decoded = decodeURIComponent(escape(text));
    console.log('üî§ Decodificado via decodeURIComponent:', decoded);
    return decoded;
  } catch (e) {
    console.log('‚ö†Ô∏è Erro ao decodificar UTF-8, tentando m√©todo alternativo');
    
    try {
      // M√©todo alternativo usando TextDecoder
      const encoder = new TextEncoder();
      const decoder = new TextDecoder('utf-8');
      const bytes = encoder.encode(text);
      const decoded = decoder.decode(bytes);
      console.log('üî§ Decodificado via TextDecoder:', decoded);
      return decoded;
    } catch (e2) {
      console.log('‚ö†Ô∏è Erro no TextDecoder, retornando texto original');
      return text;
    }
  }
} 